import UIKit
import AccuraOCR

class LVController: UIViewController,LivenessData,FacematchData
{
    
    @IBOutlet var mainView: UIView!
    var callBack: RCTResponseSenderBlock? = nil
    var liveness = Liveness()
    var faceImage: UIImage?
    var faceRegion: NSFaceRegion?
    var reactViewController:UIViewController? = nil
    var isLiveness = false
    var livenessConfig:NSDictionary = [:]
    var win: UIWindow? = nil
    
    
    var facematch = Facematch()
    var isfacematch = false
    var faceArgs:NSDictionary = [:]
    
    func closeMe() {
        self.win!.rootViewController = reactViewController!
        //        self.dismiss(animated: true) {}
    }
    
    override func viewDidLoad() {
        mainView.isHidden = true
        super.viewDidLoad()
        self.faceRegion = EngineWrapper.detectSourceFaces(self.faceImage)
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        if isLiveness{
            
            if livenessConfig["backGroundColor"] != nil{
                liveness.setBackGroundColor(livenessConfig["backGroundColor"] as! String)
            }
            if livenessConfig["closeIconColor"] != nil{
                liveness.setCloseIconColor(livenessConfig["closeIconColor"] as! String)
            }
            if livenessConfig["feedbackBackGroundColor"] != nil{
                liveness.setFeedbackBackGroundColor(livenessConfig["feedbackBackGroundColor"] as! String)
            }
            if livenessConfig["feedbackTextColor"] != nil{
                liveness.setFeedbackTextColor(livenessConfig["feedbackTextColor"] as! String)
            }
            if livenessConfig["setApiKey"] != nil {
//                print("\(livenessConfig["setLivenessURL"])")
                liveness.setApiKey(livenessConfig["setApiKey"] as! String)
            }else{
                liveness.setApiKey("")
                
            }
            if livenessConfig["setLivenessURL"] != nil {
//                print("\(livenessConfig["setLivenessURL"])")
                liveness.setLivenessURL(livenessConfig["setLivenessURL"] as! String)
            }
            
            if livenessConfig["isShowLogo"] != nil &&
               livenessConfig["isShowLogo"] as! Int == 0{
                liveness.hideLogo(true)
            }else{ 
                liveness.hideLogo(false)
            }
            
            if livenessConfig["setFeedbackTextSize"] != nil {
                liveness.setFeedbackTextSize((livenessConfig["setFeedbackTextSize"] as? Float)!)
            }else{
                liveness.setFeedbackTextSize(Float(18.0))
            }
            if livenessConfig["setFeedbackTextSize"] != nil {
                liveness.setFeedbackTextSize((livenessConfig["setFeedbackTextSize"] as? Float)!)
            }else{
                liveness.setFeedbackTextSize(Float(18.0))
            }
            if livenessConfig["setFeedBackframeMessage"] != nil {
                liveness.setFeedBackframeMessage(livenessConfig["setFeedBackframeMessage"] as! String)
            }else{
                liveness.setFeedBackframeMessage("Frame Your Face")
            }
            if livenessConfig["setFeedBackAwayMessage"] != nil {
                liveness.setFeedBackAwayMessage(livenessConfig["setFeedBackAwayMessage"] as! String)
            }else{
                liveness.setFeedBackAwayMessage("Move Phone Away")
            }
            if livenessConfig["setFeedBackOpenEyesMessage"] != nil {
                liveness.setFeedBackOpenEyesMessage(livenessConfig["setFeedBackOpenEyesMessage"] as! String)
            }else{
                liveness.setFeedBackOpenEyesMessage("Keep Open Your Eyes")
            }
            if livenessConfig["setFeedBackCloserMessage"] != nil {
                liveness.setFeedBackCloserMessage(livenessConfig["setFeedBackCloserMessage"] as! String)
            }else{
                liveness.setFeedBackCloserMessage("Move Phone Closer")
            }
            if livenessConfig["setFeedBackCenterMessage"] != nil {
                liveness.setFeedBackCenterMessage(livenessConfig["setFeedBackCenterMessage"] as! String)
            }else{
                liveness.setFeedBackCenterMessage("Center Your Face")
            }
            if livenessConfig["setFeedBackFaceSteadymessage"] != nil {
                liveness.setFeedBackFaceSteadymessage(livenessConfig["setFeedBackFaceSteadymessage"] as! String)
            }else{
                liveness.setFeedbackMultipleFaceMessage("Multiple face detected")
            }
            if livenessConfig["setFeedBackFaceSteadymessage"] != nil {
                liveness.setFeedBackFaceSteadymessage(livenessConfig["setFeedBackFaceSteadymessage"] as! String)
            }else{
                liveness.setFeedBackFaceSteadymessage("Keep Your Head Straight")
            }
            if livenessConfig["setFeedBackLowLightMessage"] != nil {
                liveness.setFeedBackLowLightMessage(livenessConfig["setFeedBackLowLightMessage"] as! String)
            }else{
                liveness.setFeedBackLowLightMessage("Low light detected")
            }
            if livenessConfig["setFeedBackBlurFaceMessage"] != nil {
                liveness.setFeedBackBlurFaceMessage(livenessConfig["setFeedBackBlurFaceMessage"] as! String)
            }else{
                liveness.setFeedBackBlurFaceMessage("Blur detected over face")
            }
            if livenessConfig["setFeedBackGlareFaceMessage"] != nil {
                liveness.setFeedBackGlareFaceMessage(livenessConfig["setFeedBackGlareFaceMessage"] as! String)
            }else{
                liveness.setFeedBackGlareFaceMessage("Glare detected")
            }
            if livenessConfig["setBlurPercentage"] != nil {
                liveness.setBlurPercentage(livenessConfig["setBlurPercentage"] as! Int32)
            }else{
                liveness.setBlurPercentage(80) // set blure percentage -1 to remove this filter
            }
            if livenessConfig["setGlarePercentage_0"] != nil && livenessConfig["setGlarePercentage_1"] != nil{
                liveness.setGlarePercentage(livenessConfig["setGlarePercentage_0"] as! Int32,livenessConfig["setGlarePercentage_1"] as! Int32)
            }else{
                liveness.setGlarePercentage(-1, -1) //set glaremin -1 to remove this filter
            }
            
            liveness.setAlertText("Remove Cap/Glasses To Proceed For Liveness Check")
            
            liveness.setDefaultText("Keep Face In Frame\nFace Must Be Near To Camera")
            // 0 for clean face and 100 for Blurry face
            
            // Set min and max percentage for glare
            liveness.evaluateServerTrustWIthSSLPinning(false)
            
            if isLiveness{
                isLiveness = false
                liveness.setLiveness(self)
                
            }else{
                closeMe()
            }
        }else if isfacematch{
            if faceArgs["backGroundColor"] != nil {
                facematch.setBackGroundColor(faceArgs["backGroundColor"] as! String)

            }
            if faceArgs["closeIconColor"] != nil {
                facematch.setCloseIconColor(faceArgs["closeIconColor"] as! String)

            }
            if faceArgs["feedbackBackGroundColor"] != nil {
                facematch.setFeedbackBackGroundColor(faceArgs["feedbackBackGroundColor"] as! String)

            }
            if faceArgs["feedbackTextColor"] != nil {
                facematch.setFeedbackTextColor(faceArgs["feedbackTextColor"] as! String)

            }
            
            if faceArgs["setFeedbackTextSize"] != nil {
                facematch.setFeedbackTextSize((faceArgs["setFeedbackTextSize"] as? Float)!)
            }else{
                facematch.setFeedbackTextSize(Float(18.0))
            }
            if faceArgs["setFeedBackframeMessage"] != nil {
                facematch.setFeedBackframeMessage(faceArgs["setFeedBackframeMessage"] as! String)
            }else{
                facematch.setFeedBackframeMessage("Frame Your Face")
            }
            if faceArgs["setFeedBackAwayMessage"] != nil {
                facematch.setFeedBackAwayMessage(faceArgs["setFeedBackAwayMessage"] as! String)
            }else{
                facematch.setFeedBackAwayMessage("Move Phone Away")
            }
            if faceArgs["setFeedBackOpenEyesMessage"] != nil {
                facematch.setFeedBackOpenEyesMessage(faceArgs["setFeedBackOpenEyesMessage"] as! String)
            }else{
                facematch.setFeedBackOpenEyesMessage("Keep Open Your Eyes")
                
            }
            if faceArgs["setFeedBackCloserMessage"] != nil {
                facematch.setFeedBackCloserMessage(faceArgs["setFeedBackCloserMessage"] as! String)
            }else{
                facematch.setFeedBackCloserMessage("Move Phone Closer")
            }
            if faceArgs["setFeedBackCenterMessage"] != nil {
                facematch.setFeedBackCenterMessage(faceArgs["setFeedBackCenterMessage"] as! String)
            }else{
                facematch.setFeedBackCenterMessage("Center Your Face")
            }
            if faceArgs["setFeedbackMultipleFaceMessage"] != nil {
                facematch.setFeedbackMultipleFaceMessage(faceArgs["setFeedbackMultipleFaceMessage"] as! String)
            }else{
                facematch.setFeedbackMultipleFaceMessage("Multiple face detected")
            }
            if faceArgs["setFeedBackFaceSteadymessage"] != nil {
                facematch.setFeedBackFaceSteadymessage(faceArgs["setFeedBackFaceSteadymessage"] as! String)
            }else{
                facematch.setFeedBackFaceSteadymessage("Keep Your Head Straight")
            }
            if faceArgs["setFeedBackLowLightMessage"] != nil {
                facematch.setFeedBackFaceSteadymessage(faceArgs["setFeedBackLowLightMessage"] as! String)
            }else{
                facematch.setFeedBackLowLightMessage("Low light detected")
            }
            if faceArgs["setFeedBackBlurFaceMessage"] != nil {
                facematch.setFeedBackBlurFaceMessage(faceArgs["setFeedBackBlurFaceMessage"] as! String)
            }else{
                facematch.setFeedBackBlurFaceMessage("Blur detected over face")
            }
            if faceArgs["setFeedBackGlareFaceMessage"] != nil {
                facematch.setFeedBackGlareFaceMessage(faceArgs["setFeedBackGlareFaceMessage"] as! String)
            }else{
                facematch.setFeedBackGlareFaceMessage("Glare detected")
            }
            if faceArgs["setBlurPercentage"] != nil {
                facematch.setBlurPercentage(faceArgs["setBlurPercentage"] as! Int32)
            }else{
                facematch.setBlurPercentage(80) // set blure percentage -1 to remove this filter
            }
            if faceArgs["setGlarePercentage_0"] != nil && faceArgs["setGlarePercentage_1"] != nil {
                facematch.setGlarePercentage(faceArgs["setGlarePercentage_0"] as! Int32, faceArgs["setGlarePercentage_1"] as! Int32)
            }else{
                facematch.setGlarePercentage(-1, -1)
            }
            
            facematch.setDefaultText("Keep Face In Frame\nFace Must Be Near To Camera")
            // 0 for clean face and 100 for Blurry face
            
            // Set min and max percentage for glare
            
            if isfacematch{
                isfacematch = false
                
                facematch.setFacematch(self)
                
            }else{
                closeMe()
            }
        }else{
            closeMe()
        }
    }
    
    func resizeImage(image: UIImage, targetSize: CGRect) -> UIImage {
        let contextImage: UIImage = UIImage(cgImage: image.cgImage!)
        var newX = targetSize.origin.x - (targetSize.size.width * 0.4)
        var newY = targetSize.origin.y - (targetSize.size.height * 0.4)
        var newWidth = targetSize.size.width * 1.8
        var newHeight = targetSize.size.height * 1.8
        if newX < 0 {
            newX = 0
        }
        if newY < 0 {
            newY = 0
        }
        if newX + newWidth > image.size.width{
            newWidth = image.size.width - newX
        }
        if newY + newHeight > image.size.height{
            newHeight = image.size.height - newY
        }
        // This is the rect that we've calculated out and this is what is actually used below
        let rect = CGRect(x: newX, y: newY, width: newWidth, height: newHeight)
        let imageRef: CGImage = contextImage.cgImage!.cropping(to: rect)!
        let image1: UIImage = UIImage(cgImage: imageRef)
        return image1
    }
    
    func sendError(msg: String) {
        
        self.callBack!([msg as Any, NSNull()])
    }
    
    @IBAction func baAtn(_ sender: UIButton) {
        closeMe()
    }
    //}
    //
    //
    //
    //extension LVController: LivenessData,FacematchData {
    
    func livenessViewDisappear() {
        closeMe()
    }
    
    func livenessData(_ livenessImage: UIImage!) {
        var results:[String: Any] = [:]

        if (faceRegion != nil)
        {
            let face2 = EngineWrapper.detectTargetFaces(livenessImage, feature1: faceRegion?.feature)
//            let face11 = faceRegion?.image
            let fm_Score = EngineWrapper.identify(faceRegion?.feature, featurebuff2: face2?.feature)
            if(fm_Score != 0.0){
                let data = face2?.bound
                let image = self.resizeImage(image: livenessImage, targetSize: data!)
                results["detect"] = AccurascanKyc.getImageUri(img: image, name: nil)
                results["fm_score"] = AccurascanKyc.getImageUri(img: faceImage!, name: nil)
                let twoDecimalPlaces = String(format: "%.2f", fm_Score*100) //Face Match score convert to float value
//                results["score"] = stLivenessValue.replacingOccurrences(of: " %", with: "")
                results["face_score"] = twoDecimalPlaces
                faceImage = nil
                self.callBack!([NSNull(),AccurascanKyc.convertJSONString(results:results)])
//                print(twoDecimalPlaces)
                EngineWrapper.faceEngineClose()
                closeMe()
            }
        }else{
            results["detect"] = AccurascanKyc.getImageUri(img: livenessImage, name: nil)
//            results["score"] = stLivenessValue.replacingOccurrences(of: " %", with: "")
            self.callBack!([NSNull(),AccurascanKyc.convertJSONString(results:results)])
//            callBack!(["Failed to get liveness. Please try again", NSNull()])
            EngineWrapper.faceEngineClose()
            closeMe()
        }
    }
    
    func livenessData(_ stLivenessValue: String!, livenessImage: UIImage!, status: Bool) {
        isLiveness = false
        var results:[String: Any] = [:]
        
        if status == false {
            results["status"] = false
            //             callBack!(FlutterError.init(code: "101", message: "Failed to get liveness. Please try again", details: nil))
            //             closeMe()
        }else{
            results["status"] = true
        }
        //        if let frontUri = EngineWrapper.detectSourceFaces(faceImage){
        //                self.faceRegion = frontUri
        //            }else{
        //                self.faceRegion = nil
        //            }
        
        if (faceRegion != nil)
        {
            let face2 = EngineWrapper.detectTargetFaces(livenessImage, feature1: faceRegion?.feature)
//            let face11 = faceRegion?.image
            let fm_Score = EngineWrapper.identify(faceRegion?.feature, featurebuff2: face2?.feature)
            if(fm_Score != 0.0){
                let data = face2?.bound
                let image = self.resizeImage(image: livenessImage, targetSize: data!)
                results["detect"] = AccurascanKyc.getImageUri(img: image, name: nil)
                results["fm_score"] = AccurascanKyc.getImageUri(img: faceImage!, name: nil)
                let twoDecimalPlaces = String(format: "%.2f", fm_Score*100) //Face Match score convert to float value
                results["score"] = stLivenessValue.replacingOccurrences(of: " %", with: "")
                results["face_score"] = twoDecimalPlaces
                faceImage = nil
                self.callBack!([NSNull(),AccurascanKyc.convertJSONString(results:results)])
//                print(twoDecimalPlaces)
                EngineWrapper.faceEngineClose()
                closeMe()
            }
        }else{
            results["detect"] = AccurascanKyc.getImageUri(img: livenessImage, name: nil)
            results["score"] = stLivenessValue.replacingOccurrences(of: " %", with: "")
            self.callBack!([NSNull(),AccurascanKyc.convertJSONString(results:results)])
//            callBack!(["Failed to get liveness. Please try again", NSNull()])
            EngineWrapper.faceEngineClose()
            closeMe()
        }
    }
    
    
    
    //    func didChangedLivenessState(_ livenessState: LivenessType) {
    //
    //    }
    
    func livenessData(_ stLivenessValue: String!, livenessImage: UIImage!, status: Bool, videoPath: String!, imagePath: String!) {
        
    }
    
    func facematchViewDisappear() {
        closeMe()
    }
    
    func facematchData(_ FaceImage: UIImage!) {
        isfacematch = false
        var results:[String: Any] = [:]
        //        self.faceRegion = EngineWrapper.detectSourceFaces(self.faceImage)
//        print(faceRegion as Any)
        if (faceRegion != nil)
        {
            let face2 = EngineWrapper.detectTargetFaces(FaceImage, feature1: faceRegion?.feature)
//            let face11 = faceRegion?.image
            let fm_Score = EngineWrapper.identify(faceRegion?.feature, featurebuff2: face2?.feature)
            if(fm_Score != 0.0){
                let data = face2?.bound
                let image = self.resizeImage(image: FaceImage, targetSize: data!)
                results["detect"] = AccurascanKyc.getImageUri(img: image, name: nil)
                let twoDecimalPlaces = String(format: "%.2f", fm_Score*100) //Face Match score convert to float value
                results["score"] = "\(twoDecimalPlaces)"
                self.callBack!([NSNull(),AccurascanKyc.convertJSONString(results:results)])
                EngineWrapper.faceEngineClose()
//                print(twoDecimalPlaces)
                closeMe()
            }
        }else{
            callBack!(["Failed to get Facematch. Please try again", NSNull()])
            EngineWrapper.faceEngineClose()
            closeMe()
        }
    }
}
