package com.accurascankyc;

import android.app.Activity;
import android.app.Dialog;
import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Rect;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.drawable.GradientDrawable;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.text.TextUtils;
import android.util.Base64;
import android.util.Log;
import android.util.TypedValue;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.Nullable;

import com.accurascan.facedetection.utils.AccuraLivenessLog;
import com.accurascan.ocr.mrz.CameraView;
// import com.accurascan.ocr.mrz.customview.CustomTextView;
import com.accurascan.ocr.mrz.interfaces.OcrCallback;
import com.accurascan.ocr.mrz.model.BarcodeFormat;
import com.accurascan.ocr.mrz.model.CardDetails;
import com.accurascan.ocr.mrz.model.OcrData;
import com.accurascan.ocr.mrz.model.PDF417Data;
import com.accurascan.ocr.mrz.model.RecogResult;
import com.accurascan.ocr.mrz.motiondetection.SensorsActivity;
import com.accurascan.ocr.mrz.util.AccuraLog;
import com.docrecog.scan.MRZDocumentType;
import com.docrecog.scan.RecogEngine;
import com.docrecog.scan.RecogType;
import com.squareup.picasso.Picasso;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.lang.ref.WeakReference;
import java.security.cert.CertificateException;
import java.util.Arrays;
import java.util.List;

import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSession;
import javax.net.ssl.SSLSocketFactory;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;

import okhttp3.OkHttpClient;
import android.view.ViewGroup.LayoutParams;
import android.graphics.Typeface;

public class OcrActivity extends SensorsActivity implements OcrCallback {

  private static final String TAG = OcrActivity.class.getSimpleName();
  private CameraView cameraView;
  private View viewLeft, viewRight,logoImg,viewTop,viewBottom;
  private AccuraCardBorderView borderFrame;
  private BorderTextView tvTitle, tvScanMessage;
  private ImageView imageFlip;
  private int cardId;
  private int countryId;
  public static RecogType recogType;
  Dialog types_dialog;
  private String cardName;
  private boolean isBack = false;
  private MRZDocumentType mrzType;
  public static JSONObject accuraErrorConfg;
  public static JSONObject accuraTitleMsg;
  public static int barcodeFormat;
  private Bitmap frame;
  private static Activity appActivity = null;

  private static class MyHandler extends Handler {

    private final WeakReference<OcrActivity> mActivity;

    public MyHandler(OcrActivity activity) {
      mActivity = new WeakReference<>(activity);
    }

    @Override
    public void handleMessage(Message msg) {
      OcrActivity activity = mActivity.get();

            //  if(accuraErrorConfg.getInt("enableLogs") == 1){
               AccuraLog.enableLogs(false); // make sure to disable logs in release mode
               AccuraLivenessLog.setDEBUG(false);
              //  AccuraLog.refreshLogfile(activity);
            //  }


      if (activity != null) {
        String s = "";
        if (msg.obj instanceof String) s = (String) msg.obj;
        switch (msg.what) {
          case 0: activity.tvTitle.setText(s);break;
          case 1: activity.tvScanMessage.setText(s);break;
          case 2:
                   try {
                     if(accuraErrorConfg.getInt("isFlipImg") == 1){
            if (activity.cameraView != null) activity.cameraView.flipImage(activity.imageFlip);
                     }
                   } catch (JSONException e) {
                     e.printStackTrace();
                   }
            break;
          default: break;
        }
      }
      super.handleMessage(msg);
    }
  }

  private Handler handler = new MyHandler(this);
  String type = "";
  Boolean needCallback = true;
  @Override
  public void onCreate(Bundle savedInstanceState) {
    if (cameraView != null) cameraView.startOcrScan(false);

    // try{
    //   if(accuraErrorConfg.getInt("enableLogs") == 1){
    //     AccuraLog.enableLogs(true); // make sure to disable logs in release mode
    //     AccuraLog.refreshLogfile(appActivity);
    //   }
    // } catch (JSONException e) {
    //   e.printStackTrace();
    // }

    int orientation = getResources().getConfiguration().orientation;
    if (orientation == 1) {
      setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
    } else {
      setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
    }
    super.onCreate(savedInstanceState);
    requestWindowFeature(Window.FEATURE_NO_TITLE); // Hide the window title.
    setContentView(R.layout.ocr_activity);
    AccuraLog.loge(TAG, "Start Camera Activity");
    init();

//        recogType = RecogType.detachFrom(getIntent());
    if (getIntent().hasExtra(MRZDocumentType.class.getName())) {
      recogType = RecogType.MRZ;
      mrzType = MRZDocumentType.detachFrom(getIntent());
    } else {
      mrzType = MRZDocumentType.NONE;
    }
    cardId = getIntent().getIntExtra("card_id", 0);
    countryId = getIntent().getIntExtra("country_id", 0);
    cardName = getIntent().getStringExtra("card_name");

    AccuraLog.loge(TAG, "RecogType " + recogType);
    AccuraLog.loge(TAG, "Card Id " + cardId);
    AccuraLog.loge(TAG, "Country Id " + countryId);

    initCamera();

       try {
           if(accuraErrorConfg.getInt("isShowLogo") == 0){
               logoImg.setVisibility(View.GONE);
           }else{
               logoImg.setVisibility(View.VISIBLE);
           }
       } catch (JSONException e) {
           e.printStackTrace();
       }
//        if (bundle.containsKey("IS_SHOW_LOGO")) {
//            Boolean isShow = bundle.getBoolean("IS_SHOW_LOGO");
//            Log.i(TAG, "isSHow:- " + isShow);
//            viewImageLayer.setVisibility( isShow ? View.VISIBLE : View.GONE);
//        }

//        if (recogType == RecogType.BARCODE) {
//            barcodeFormatDialog();
//        }
  }

  private void initCamera() {
    AccuraLog.loge(TAG, "Initialized camera");
    //<editor-fold desc="To get status bar height">
    Rect rectangle = new Rect();
    Window window = getWindow();
    window.getDecorView().getWindowVisibleDisplayFrame(rectangle);
    int statusBarTop = rectangle.top;
    int contentViewTop = window.findViewById(Window.ID_ANDROID_CONTENT).getTop();
    int statusBarHeight = contentViewTop - statusBarTop;
    //</editor-fold>

    RelativeLayout linearLayout = findViewById(R.id.ocr_root); // layout width and height is match_parent

    cameraView = new CameraView(this);
    if (recogType == RecogType.OCR || recogType == RecogType.DL_PLATE) {
      // must have to set data for RecogType.OCR and RecogType.DL_PLATE
      cameraView.setCountryId(countryId).setCardId(cardId)
        .setMinFrameForValidate(3); // to set min frame for qatar Id card
    } else if (recogType == RecogType.PDF417) {
      // must have to set data RecogType.PDF417
      cameraView.setCountryId(countryId);
    } else if (recogType == RecogType.MRZ) {
      cameraView.setMRZDocumentType(mrzType);
      // Pass 'all' for accepting MRZs of all countries
      // or you can pass respective country codes of countries whose MRZ you want to accept. Eg:- IND, USA, TUN, etc.
      cameraView.setMRZCountryCodeList("all");
    }

    cameraView.setRecogType(recogType)
      .setView(linearLayout) // To add camera view
      .setOcrCallback(this)  // To get Update and Success Call back
      .setStatusBarHeight(statusBarHeight)  // To remove Height from Camera View if status bar visible
      .setFrontSide();
    cameraView.setCameraFacing(0);//(accuraErrorConfg.getInt("setCameraFacing")); // To set front or back camera.

    if (recogType == RecogType.BARCODE) {
      cameraView.setBarcodeFormat(barcodeFormat);
    }
//                optional field
//                .setEnableMediaPlayer(false) // false to disable sound and true to enable sound and default it is true
//                .setCustomMediaPlayer(MediaPlayer.create(this, com.accurascan.ocr.mrz.R.raw.beep)) // To add your custom sound and Must have to enable media player
    cameraView.init();  // initialized camera
  }

  private void init() {
    viewLeft = findViewById(R.id.view_left_frame);
    viewRight = findViewById(R.id.view_right_frame);
    viewTop = findViewById(R.id.view_top_frame);
    viewBottom = findViewById(R.id.view_bottom_frame);

    borderFrame = findViewById(R.id.border_frame);
    tvTitle = findViewById(R.id.tv_title);
    tvScanMessage = findViewById(R.id.tv_scan_msg);
    imageFlip = findViewById(R.id.im_flip_image);
    logoImg = findViewById(R.id.imageLOGO);
//        btn_barcode_selection = findViewById(R.id.select_type);
    View btn_flip = findViewById(R.id.btn_flip);
    btn_flip.setOnClickListener(v -> {
      if (cameraView!=null) {
        cameraView.flipCamera();
      }
    });

    try {
      if (accuraErrorConfg.has("CameraScreen_Heading_Text_Size")){
        tvTitle.setTextSize(accuraErrorConfg.getInt("CameraScreen_Heading_Text_Size"));
      }else{
      }
    } catch (JSONException e) {
      e.printStackTrace();
    }

    try {
      if (accuraErrorConfg.has("CameraScreen_Error_Text_Size")){
        tvScanMessage.setTextSize(accuraErrorConfg.getInt("CameraScreen_Error_Text_Size"));
      }else{
      }
    } catch (JSONException e) {
      e.printStackTrace();
    }


    try {
      borderFrame.setBorderColor(Color.parseColor(accuraErrorConfg.getString("CameraScreen_Frame_Color")));
      borderFrame.setBorderWidth(accuraErrorConfg.getInt("CameraScreen_Border_Width"));
      borderFrame.setCornerBox(accuraErrorConfg.getBoolean("CameraScreen_CornerBorder_Enable"));
    } catch (JSONException e) {
      e.printStackTrace();
    }

      try {
        if (accuraErrorConfg.getInt("CameraScreen_Change_Button") == 0){
          btn_flip.setVisibility(View.GONE);
        }else{
        }
      } catch (JSONException e) {
        e.printStackTrace();
      }

    try {
      if (!accuraErrorConfg.getString("flipImage").equals("")){
        String aaa = accuraErrorConfg.getString("flipImage");
        Picasso.get().load(aaa).into(imageFlip);
      }
    } catch (JSONException e) {
      e.printStackTrace();
    }

    String screenColor = "#00000000";
    try {
      if (accuraErrorConfg.getString("CameraScreen_Color").equals("") || !accuraErrorConfg.has("CameraScreen_Color")){
        screenColor = "#00000000";
      }else{
        screenColor = accuraErrorConfg.getString("CameraScreen_Color");
      }
    } catch (JSONException e) {
      e.printStackTrace();
    }

    String fontUrl = null;
    try {
      fontUrl = accuraErrorConfg.getString("fontStyle");
    } catch (JSONException e) {
      throw new RuntimeException(e);
    }
    if(!fontUrl.equals("")){
      new DownloadFontTask(tvTitle).execute(fontUrl);
      new DownloadFontTask(tvScanMessage).execute(fontUrl);
    }


    viewLeft.setBackgroundColor(Color.parseColor(screenColor));
    viewRight.setBackgroundColor(Color.parseColor(screenColor));
    viewTop.setBackgroundColor(Color.parseColor(screenColor));
    viewBottom.setBackgroundColor(Color.parseColor(screenColor));

    int borderWidth = 2;
    int borderCornerRadius = 10;

    String borderColor = "#ffffff";
    try {
      if (accuraErrorConfg.getString("CameraScreen_Frame_Color").equals("") || !accuraErrorConfg.has("CameraScreen_Frame_Color")){
        borderColor = "#ffffff";
      }else{
        borderColor = accuraErrorConfg.getString("CameraScreen_Frame_Color");
      }
    } catch (JSONException e) {
      e.printStackTrace();
    }
//    GradientDrawable drawable = (GradientDrawable)borderFrame.getBackground();
//    drawable.mutate(); // only change this instance of the xml, not all components using this xml
//    drawable.setStroke(dp2Px(borderWidth), Color.parseColor(borderColor));
//        drawable.setCornerRadius(dp2Px(borderCornerRadius));

    String titleTextColor = "#ffffff";
    String errorTextColor = "#ffffff";
    String messageTTextColor = "#ff0000";
    String messageETextColor = "#ff0000";
    try {
      if (accuraErrorConfg.getString("CameraScreen_Heading_Text_Color").equals("") || !accuraErrorConfg.has("CameraScreen_Heading_Text_Color")){
        titleTextColor = "#ffffff";
      }else{
        titleTextColor = accuraErrorConfg.getString("CameraScreen_Heading_Text_Color");
      }
    } catch (JSONException e) {
      e.printStackTrace();
    }

    try {
      if (accuraErrorConfg.getString("CameraScreen_Error_Text_Color").equals("") || !accuraErrorConfg.has("CameraScreen_Error_Text_Color")){
        errorTextColor = "#ffffff";
      }else{
        errorTextColor = accuraErrorConfg.getString("CameraScreen_Error_Text_Color");
      }
    } catch (JSONException e) {
      e.printStackTrace();
    }

    try {
      if (accuraErrorConfg.getString("CameraScreen_Heading_Text_Border_Color").equals("") || !accuraErrorConfg.has("CameraScreen_Heading_Text_Border_Color")){
        messageTTextColor = "#00000000";
      }else{
        messageTTextColor = accuraErrorConfg.getString("CameraScreen_Heading_Text_Border_Color");
      }
    } catch (JSONException e) {
      e.printStackTrace();
    }

    try {
      if (accuraErrorConfg.getString("CameraScreen_Error_Text_Border_Color").equals("") || !accuraErrorConfg.has("CameraScreen_Error_Text_Border_Color")){
        messageETextColor = "#00000000";
      }else{
        messageETextColor = accuraErrorConfg.getString("CameraScreen_Error_Text_Border_Color");
      }
    } catch (JSONException e) {
      e.printStackTrace();
    }

    try {
      setImageViewSize(imageFlip,accuraErrorConfg.getInt("CameraScreen_Flip_Image_Width"),accuraErrorConfg.getInt("CameraScreen_Flip_Image_Height"));
    } catch (JSONException e) {
      throw new RuntimeException(e);
    }

    tvTitle.setTextColor(Color.parseColor(titleTextColor));
    tvTitle.setStroke(2, Color.parseColor(messageTTextColor), Paint.Join.BEVEL, 10);

    tvScanMessage.setTextColor(Color.parseColor(errorTextColor));
    tvScanMessage.setStroke(2, Color.parseColor(messageETextColor), Paint.Join.ROUND, 10);


  }

  int dp2Px(int dip){
    Resources r = getResources();
    int px = (int) TypedValue.applyDimension( TypedValue.COMPLEX_UNIT_DIP,  dip, r.getDisplayMetrics()
    );
    return px;
  }

  @Override
  public void onWindowFocusChanged(boolean hasFocus) {
    if (cameraView != null) cameraView.onWindowFocusUpdate(hasFocus);
  }

  @Override
  protected void onResume() {
    super.onResume();
    if (cameraView != null) cameraView.onResume();
  }

  @Override
  protected void onPause() {
    if (cameraView != null) cameraView.onPause();
    super.onPause();
  }

  @Override
  public void onDestroy() {
    AccuraLog.loge(TAG, "onDestroy");
    if (cameraView != null) cameraView.onDestroy();
    super.onDestroy();
    Runtime.getRuntime().gc(); // to clear garbage
  }

  /**
   * Override method call after camera initialized successfully
   *
   * And update your border frame according to width and height
   * it's different for different card
   *
   * Call {@link CameraView#startOcrScan(boolean isReset)} To start Camera Preview
   *
   * @param width    border layout width
   * @param height   border layout height
   */
  @Override
  public void onUpdateLayout(int width, int height) {
    AccuraLog.loge(TAG, "Frame Size (wxh) : " + width + "x" +  height);
    if (cameraView != null) cameraView.startOcrScan(false);

    //<editor-fold desc="To set camera overlay Frame">
    ViewGroup.LayoutParams layoutParams = borderFrame.getLayoutParams();
    layoutParams.width = width;
    layoutParams.height = height;
    borderFrame.setLayoutParams(layoutParams);
    ViewGroup.LayoutParams lpRight = viewRight.getLayoutParams();
    lpRight.height = height;
    viewRight.setLayoutParams(lpRight);
    ViewGroup.LayoutParams lpLeft = viewLeft.getLayoutParams();
    lpLeft.height = height;
    viewLeft.setLayoutParams(lpLeft);

    findViewById(R.id.ocr_frame).setVisibility(View.VISIBLE);
    //</editor-fold>
    //<editor-fold desc="Barcode Selection only add for RecogType.BARCODE">
//        if (recogType == RecogType.BARCODE) cameraView.setBarcodeFormat(BarcodeFormat.BARCODE_AZTEC);
//        else btn_barcode_selection.setVisibility(View.GONE);
    //</editor-fold>
  }

  private void setImageViewSize(ImageView imageView, int width, int height) {
    LayoutParams params = imageView.getLayoutParams();
    params.width = width;
    params.height = height;
    imageView.setLayoutParams(params);
  }
  /**
   * Override this method after scan complete to get data from document
   *
   * @param result is scanned card data
   *  result instance of {@link OcrData} if recog type is {@link com.docrecog.scan.RecogType#OCR}
   *              or {@link com.docrecog.scan.RecogType#DL_PLATE} or {@link com.docrecog.scan.RecogType#BARCODE}
   *  result instance of {@link RecogResult} if recog type is {@link com.docrecog.scan.RecogType#MRZ}
   *  result instance of {@link PDF417Data} if recog type is {@link com.docrecog.scan.RecogType#PDF417}
   *
   */
  @Override
  public void onScannedComplete(Object result) {
    Runtime.getRuntime().gc(); // To clear garbage
    AccuraLog.loge(TAG, "onScannedComplete: ");
    if (result != null) {
      if (result instanceof OcrData) {
        if (recogType == RecogType.OCR) {
          if (isBack || !cameraView.isBackSideAvailable()) {
            OcrData.setOcrResult((OcrData) result);
            /**@recogType is {@link RecogType#OCR}*/
            sendDataToResultActivity(RecogType.OCR);
          } else {
            isBack = true;
            cameraView.setBackSide();
                     try {
                       if(accuraErrorConfg.getInt("isFlipImg") == 1){
                         cameraView.flipImage(imageFlip);

                       }
                     } catch (JSONException e) {
                       e.printStackTrace();
                     }
          }
        } else if (recogType == RecogType.DL_PLATE || recogType == RecogType.BARCODE) {
          /**
           * @recogType is {@link RecogType#DL_PLATE} or recogType == {@link RecogType#BARCODE}*/
          OcrData.setOcrResult((OcrData) result);
          sendDataToResultActivity(recogType);
        }
      } else if (result instanceof RecogResult) {
        /**
         *  @recogType is {@link RecogType#MRZ}*/
        RecogResult.setRecogResult((RecogResult) result);
        sendDataToResultActivity(RecogType.MRZ);
      } else if (result instanceof CardDetails) {
        /**
         *  @recogType is {@link RecogType#BANKCARD}*/
        CardDetails.setCardDetails((CardDetails) result);
        sendDataToResultActivity(RecogType.BANKCARD);
      } else if (result instanceof PDF417Data) {
        /**
         *  @recogType is {@link RecogType#PDF417}*/
        if (isBack || !cameraView.isBackSideAvailable()) {
          PDF417Data.setPDF417Result((PDF417Data) result);
          sendDataToResultActivity(recogType);
        } else {
          isBack = true;
          cameraView.setBackSide();
                 try {
                   if(accuraErrorConfg.has("isFlipImg")){
                     if(accuraErrorConfg.getInt("isFlipImg") == 1){
                       cameraView.flipImage(imageFlip);
                     }
                   }else{
                     cameraView.flipImage(imageFlip);
                   }
                 } catch (JSONException e) {
                   e.printStackTrace();
                 }
        }
      }
    } else {
      Toast.makeText(this, "Failed", Toast.LENGTH_SHORT).show();
      this.finish();
    }
  }

  private void sendDataToResultActivity(RecogType recogType) {
    if (cameraView != null) cameraView.release(true);
//            if (type.contains("ocr")) {
    RecogResult recogResult = null;
    CardDetails cardDetails = null;
    PDF417Data barcodeData = PDF417Data.getPDF417Result();
    Boolean isBarCodePdf417 = recogType == RecogType.BARCODE && barcodeData != null;
    RecogType ocrTypes[] = {RecogType.BARCODE, RecogType.DL_PLATE, RecogType.OCR};
    String frontUri = null, backUri = null, faceUri = null;
    JSONObject results = new JSONObject();
    JSONObject frontResult = new JSONObject();
    JSONObject mrzResult = new JSONObject();
    JSONObject backResult = new JSONObject();
    OcrData data = null;
    type = recogType.toString();
    String fileDir = getFilesDir().getAbsolutePath();
    if (Arrays.asList(ocrTypes).contains(recogType)) {
      data = OcrData.getOcrResult();
      if (data != null) {
        faceUri = null;
        frontUri = null;
        backUri = null;
        if (data.getFaceImage() != null) {
          faceUri = AccurascanKycModule.getImageUri(data.getFaceImage(), "face", fileDir);
        }
        if (data.getFrontimage() != null) {
          frontUri = AccurascanKycModule.getImageUri(data.getFrontimage(), "front", fileDir);
        }
        if (data.getBackimage() != null) {
          backUri = AccurascanKycModule.getImageUri(data.getBackimage(), "back", fileDir);
        }
      }
    }
    if (recogType == RecogType.MRZ) {
      faceUri = null;
      frontUri = null;
      backUri = null;
      recogResult = RecogResult.getRecogResult();
      if (recogResult != null) {
        mrzResult = setMRZData(recogResult);
        if (recogResult.faceBitmap != null) {
          faceUri = AccurascanKycModule.getImageUri(recogResult.faceBitmap, "face", fileDir);
        }
        if (recogResult.docFrontBitmap != null) {
          frontUri = AccurascanKycModule.getImageUri(recogResult.docFrontBitmap, "front", fileDir);
        }
        if (recogResult.docBackBitmap != null) {
          backUri = AccurascanKycModule.getImageUri(recogResult.docBackBitmap, "back", fileDir);
        }
      }

    } else if (recogType == RecogType.BANKCARD) {
      faceUri = null;
      frontUri = null;
      backUri = null;
      cardDetails = CardDetails.getCardDetails();
      if (cardDetails.bitmap != null) {
        frontUri = AccurascanKycModule.getImageUri(cardDetails.bitmap, "front", fileDir);
        try {
          frontResult.put("front_img", frontUri);
        } catch (JSONException e) {
          e.printStackTrace();
        }
      }
      try {
        frontResult.put("Expiry Date", cardDetails.expirationDate);
        frontResult.put("Expiry Month", cardDetails.expirationMonth);
        frontResult.put("Expiry Year", cardDetails.expirationYear);
        frontResult.put("Card Type", cardDetails.cardType);
        frontResult.put("Card Number", cardDetails.number);
      } catch (JSONException e) {
        e.printStackTrace();
      }
    } else if (recogType == RecogType.PDF417 || isBarCodePdf417) {
      type += "PDF417";
      faceUri = null;
      frontUri = null;
      backUri = null;
//                results = null;
      if (barcodeData.faceBitmap != null) {
        faceUri = AccurascanKycModule.getImageUri(barcodeData.faceBitmap, "face", fileDir);
      }
      if (barcodeData.docFrontBitmap != null) {
        frontUri = AccurascanKycModule.getImageUri(barcodeData.docFrontBitmap, "front", fileDir);
      }
      if (barcodeData.docBackBitmap != null) {
        backUri = AccurascanKycModule.getImageUri(barcodeData.docBackBitmap, "back", fileDir);
      }
      try {
        frontResult.put("firstName", barcodeData.fname);
        frontResult.put("firstName", barcodeData.firstName);
        frontResult.put("firstName", barcodeData.firstName1);
        frontResult.put("lastName", barcodeData.lname);
        frontResult.put("lastName", barcodeData.lastName);
        frontResult.put("lastName", barcodeData.lastName1);
        frontResult.put("middle_name", barcodeData.mname);
        frontResult.put("middle_name", barcodeData.middleName);
        frontResult.put("addressLine1", barcodeData.address1);
        frontResult.put("addressLine2", barcodeData.address2);
        frontResult.put("ResidenceStreetAddress1", barcodeData.ResidenceAddress1);
        frontResult.put("ResidenceStreetAddress2", barcodeData.ResidenceAddress2);
        frontResult.put("city", barcodeData.city);
        frontResult.put("zipcode", barcodeData.zipcode);
        frontResult.put("birth_date", barcodeData.birthday);
        frontResult.put("birth_date", barcodeData.birthday1);
        frontResult.put("license_number", barcodeData.licence_number);
        frontResult.put("license_expiry_date", barcodeData.licence_expire_date);
        frontResult.put("sex", barcodeData.sex);
        frontResult.put("jurisdiction_code", barcodeData.jurisdiction);
        frontResult.put("license_classification", barcodeData.licenseClassification);
        frontResult.put("license_restriction", barcodeData.licenseRestriction);
        frontResult.put("license_endorsement", barcodeData.licenseEndorsement);
        frontResult.put("issue_date", barcodeData.issueDate);
        frontResult.put("organ_donor", barcodeData.organDonor);
        frontResult.put("height_in_ft", barcodeData.heightinFT);
        frontResult.put("height_in_cm", barcodeData.heightCM);
        frontResult.put("full_name", barcodeData.fullName);
        frontResult.put("full_name", barcodeData.fullName1);
        frontResult.put("weight_in_lbs", barcodeData.weightLBS);
        frontResult.put("weight_in_kg", barcodeData.weightKG);
        frontResult.put("name_prefix", barcodeData.namePrefix);
        frontResult.put("name_suffix", barcodeData.nameSuffix);
        frontResult.put("prefix", barcodeData.Prefix);
        frontResult.put("suffix", barcodeData.Suffix);
        frontResult.put("suffix", barcodeData.Suffix1);
        frontResult.put("eye_color", barcodeData.eyeColor);
        frontResult.put("hair_color", barcodeData.hairColor);
        frontResult.put("issue_time", barcodeData.issueTime);
        frontResult.put("number_of_duplicate", barcodeData.numberDuplicate);
        frontResult.put("unique_customer_id", barcodeData.uniqueCustomerId);
        frontResult.put("social_security_number", barcodeData.socialSecurityNo);
        frontResult.put("social_security_number", barcodeData.socialSecurityNo1);
        frontResult.put("under_18", barcodeData.under18);
        frontResult.put("under_19", barcodeData.under19);
        frontResult.put("under_21", barcodeData.under21);
        frontResult.put("permit_classification_code", barcodeData.permitClassification);
        frontResult.put("veteran_indicator", barcodeData.veteranIndicator);
        frontResult.put("permit_issue", barcodeData.permitIssue);
        frontResult.put("permit_expire", barcodeData.permitExpire);
        frontResult.put("permit_restriction", barcodeData.permitRestriction);
        frontResult.put("permit_endorsement", barcodeData.permitEndorsement);
        frontResult.put("court_restriction", barcodeData.courtRestriction);
        frontResult.put("inventory_control_no", barcodeData.inventoryNo);
        frontResult.put("race_ethnicity", barcodeData.raceEthnicity);
        frontResult.put("standard_vehicle_class", barcodeData.standardVehicleClass);
        frontResult.put("document_discriminator", barcodeData.documentDiscriminator);
        frontResult.put("ResidenceCity", barcodeData.ResidenceCity);
        frontResult.put("ResidenceJurisdictionCode", barcodeData.ResidenceJurisdictionCode);
        frontResult.put("ResidencePostalCode", barcodeData.ResidencePostalCode);
        frontResult.put("MedicalIndicatorCodes", barcodeData.MedicalIndicatorCodes);
        frontResult.put("NonResidentIndicator", barcodeData.NonResidentIndicator);
        frontResult.put("VirginiaSpecificClass", barcodeData.VirginiaSpecificClass);
        frontResult.put("VirginiaSpecificRestrictions", barcodeData.VirginiaSpecificRestrictions);
        frontResult.put("VirginiaSpecificEndorsements", barcodeData.VirginiaSpecificEndorsements);
        frontResult.put("PhysicalDescriptionWeight", barcodeData.PhysicalDescriptionWeight);
        frontResult.put("CountryTerritoryOfIssuance", barcodeData.CountryTerritoryOfIssuance);
        frontResult.put("FederalCommercialVehicleCodes", barcodeData.FederalCommercialVehicleCodes);
        frontResult.put("PlaceOfBirth", barcodeData.PlaceOfBirth);
        frontResult.put("StandardEndorsementCode", barcodeData.StandardEndorsementCode);
        frontResult.put("StandardRestrictionCode", barcodeData.StandardRestrictionCode);
        frontResult.put("JuriSpeciVehiClassiDescri", barcodeData.JuriSpeciVehiClassiDescri);
        frontResult.put("JuriSpeciRestriCodeDescri", barcodeData.JuriSpeciRestriCodeDescri);
        frontResult.put("ComplianceType", barcodeData.ComplianceType);
        frontResult.put("CardRevisionDate", barcodeData.CardRevisionDate);
        frontResult.put("HazMatEndorsementExpiryDate", barcodeData.HazMatEndorsementExpiryDate);
        frontResult.put("LimitedDurationDocumentIndicator", barcodeData.LimitedDurationDocumentIndicator);
        frontResult.put("FamilyNameTruncation", barcodeData.FamilyNameTruncation);
        frontResult.put("FirstNamesTruncation", barcodeData.FirstNamesTruncation);
        frontResult.put("MiddleNamesTruncation", barcodeData.MiddleNamesTruncation);
        frontResult.put("organ_donor_indicator", barcodeData.OrganDonorIndicator);
        frontResult.put("PermitIdentifier", barcodeData.PermitIdentifier);
        frontResult.put("AuditInformation", barcodeData.AuditInformation);
        frontResult.put("JurisdictionSpecific", barcodeData.JurisdictionSpecific);
        if (!TextUtils.isEmpty(barcodeData.wholeDataString)) {
          frontResult.put("PDF417", barcodeData.wholeDataString);
        }
      } catch (JSONException e) {
        e.printStackTrace();
      }
    }

    if (data != null) {
      OcrData.MapData frontData = data.getFrontData();
      OcrData.MapData backData = data.getBackData();
      if (frontData != null) {
        List<OcrData.MapData.ScannedData> frontScanData = frontData.getOcr_data();
        for (int i = 0; i < frontScanData.size(); i++) {
          if (frontScanData.get(i).getKey() != null) {
            try {
              if (frontScanData.get(i).getKey().equalsIgnoreCase("signature")) {
                String base64Uri = getBase64Uri(frontScanData.get(i).getKey_data());
                if (base64Uri != null) {
                  frontResult.put("signature", base64Uri);
                }
              } else if (frontScanData.get(i).getKey().equalsIgnoreCase("mrz")) {
                RecogResult mrzData = data.getMrzData();
                if (mrzData != null) {
                  mrzResult = setMRZData(mrzData);
                }
              } else {
                frontResult.put(frontScanData.get(i).getKey(), frontScanData.get(i).getKey_data());
              }
            } catch (JSONException e) {
              e.printStackTrace();
            }
          }
        }
      }
      if (backData != null) {
        List<OcrData.MapData.ScannedData> backScanData = backData.getOcr_data();
        for (int i = 0; i < backScanData.size(); i++) {
          if (backScanData.get(i).getKey() != null) {
            try {
              if (backScanData.get(i).getKey().equalsIgnoreCase("signature")) {
                String base64Uri = getBase64Uri(backScanData.get(i).getKey_data());
                if (base64Uri != null) {
                  backResult.put("signature", base64Uri);
                }
              } else if (backScanData.get(i).getKey().equalsIgnoreCase("mrz")) {
                RecogResult mrzData = data.getMrzData();
                if (mrzData != null) {
                  mrzResult = setMRZData(mrzData);
                }
              }  else {
                backResult.put(backScanData.get(i).getKey(), backScanData.get(i).getKey_data());
              }

            } catch (JSONException e) {
              e.printStackTrace();
            }
          }

        }
      }
    }
    try {
      if (faceUri != null) {
        results.put("face", faceUri);
      }
      if (frontUri != null) {
        results.put("front_img", frontUri);
      }
      if (backUri != null) {
        results.put("back_img", backUri);
      }
      results.put("type", type);
      if (recogType != RecogType.BARCODE){
        results.put("back_data", backResult);
      }
      results.put("front_data", frontResult);
      results.put("mrz_data", mrzResult);


    } catch (JSONException e) {
      e.printStackTrace();
    }
    runOnUiThread(new Runnable() {
      public void run() {
        //Do something on UiThread
        Log.i(TAG, "runOnUiThread CALLED");
        AccurascanKycModule.onResult.invoke(null, results.toString());

      }
    });

    finish();
    cameraView.onDestroy();

    return;

  }

  //Extra Code
  public String getBase64Uri(String base64Str) {
    byte[] decodedString = Base64.decode(base64Str, Base64.DEFAULT);
    String path = getFilesDir().getAbsolutePath();
    OutputStream fOut = null;
    File file = new File(path, AccurascanKycModule.getSaltString() + "_signature.jpg");
    Bitmap decodedByte = BitmapFactory.decodeByteArray(decodedString, 0, decodedString.length);

    try {
      fOut = new FileOutputStream(file);
    } catch (FileNotFoundException e) {
      e.printStackTrace();
    }
    decodedByte.compress(Bitmap.CompressFormat.JPEG, 100, fOut);
    try {
      fOut.close();
      return "file://" + file.getAbsolutePath();
    } catch (IOException e) {
      e.printStackTrace();
    }
    return null;
  }

  /**
   * @param titleCode to display scan card message on top of border Frame
   *
   * @param errorMessage To display process message.
   *                null if message is not available
   * @param isFlip  To set your customize animation after complete front scan
   */
  @Override
  public void onProcessUpdate(int titleCode, String errorMessage, boolean isFlip) {
    AccuraLog.loge(TAG, "onProcessUpdate :-> " + titleCode + "," + errorMessage + "," + isFlip);
    Message message;
    if (getTitleMessage(titleCode) != null) {
      /**
       *
       * 1. Scan Frontside of Card Name // for front side ocr
       * 2. Scan Backside of Card Name // for back side ocr
       * 3. Scan Card Name // only for single side ocr
       * 4. Scan Front Side of Document // for MRZ and PDF417
       * 5. Now Scan Back Side of Document // for MRZ and PDF417
       * 6. Scan Number Plate // for DL plate
       */

      message = new Message();
      message.what = 0;
      message.obj = getTitleMessage(titleCode);
      handler.sendMessage(message);
//            tvTitle.setText(title);
    }
    if (errorMessage != null) {
      message = new Message();
      message.what = 1;
      message.obj = getErrorMessage(errorMessage);
      handler.sendMessage(message);
//            tvScanMessage.setText(message);
    }
    if (isFlip) {
      message = new Message();
      message.what = 2;
      handler.sendMessage(message);//  to set default animation or remove this line to set your customize animation
    }

  }

  private String getTitleMessage(int titleCode) {
    try {
      if (accuraErrorConfg.getBoolean("Disable_Card_Name")){
        cardName = "";
      }
    } catch (JSONException e) {
      e.printStackTrace();
    }
    if (titleCode < 0) return null;
    switch (titleCode){
      case RecogEngine.SCAN_TITLE_OCR_FRONT:// for front side ocr;
        if (accuraTitleMsg.has("SCAN_TITLE_OCR_FRONT")){
          try {
            if(accuraTitleMsg.getString("SCAN_TITLE_OCR_FRONT").equals("")){
              return "";
            }else{
              return String.format(accuraTitleMsg.getString("SCAN_TITLE_OCR_FRONT") + " %s",cardName);
            }
          } catch (JSONException e) {
            e.printStackTrace();
          }
        }else{
          return String.format("Scan Front Side of %s", cardName);
        }
      case RecogEngine.SCAN_TITLE_OCR_BACK: // for back side ocr
        if (accuraTitleMsg.has("SCAN_TITLE_OCR_BACK")){
          try {
            if(accuraTitleMsg.getString("SCAN_TITLE_OCR_BACK").equals("")){
              return "";
            }else {
              return String.format(accuraTitleMsg.getString("SCAN_TITLE_OCR_BACK") + "%s", cardName);
            }
          } catch (JSONException e) {
            e.printStackTrace();
          }
        }else{
          return String.format("Scan Back Side of %s", cardName);
        }
      case RecogEngine.SCAN_TITLE_OCR: // only for single side ocr
        if (accuraTitleMsg.has("SCAN_TITLE_OCR")){
          try {
            if(accuraTitleMsg.getString("SCAN_TITLE_OCR").equals("")){
              return "";
            }else {
              return String.format(accuraTitleMsg.getString("SCAN_TITLE_OCR") + " %s", cardName);
            }
          } catch (JSONException e) {
            e.printStackTrace();
          }
        }else {
          return String.format("Scan %s", cardName);
        }
      case RecogEngine.SCAN_TITLE_MRZ_PDF417_FRONT:// for front side MRZ and PDF417
        if (recogType == RecogType.BANKCARD) {
          if (accuraTitleMsg.has("SCAN_TITLE_BANKCARD")){
            try {
              if(accuraTitleMsg.getString("SCAN_TITLE_BANKCARD").equals("")){
                return "";
              }else {
                return accuraTitleMsg.getString("SCAN_TITLE_BANKCARD");
              }
            } catch (JSONException e) {
              e.printStackTrace();
            }
          }else{
            return "Scan Bank Card";
          }
        } else if (recogType == RecogType.BARCODE) {
          if (accuraTitleMsg.has("SCAN_TITLE_BARCODE")){
            try {
              if(accuraTitleMsg.getString("SCAN_TITLE_BARCODE").equals("")){
                return "";
              }else {
                return accuraTitleMsg.getString("SCAN_TITLE_BARCODE");
              }
            } catch (JSONException e) {
              e.printStackTrace();
            }
          }else{
            return "Scan Barcode";
          }
        } else
        if (accuraTitleMsg.has("SCAN_TITLE_MRZ_PDF417_FRONT")){
          try {
            if(accuraTitleMsg.getString("SCAN_TITLE_MRZ_PDF417_FRONT").equals("")){
              return "";
            }else {
              return accuraTitleMsg.getString("SCAN_TITLE_MRZ_PDF417_FRONT");
            }
          } catch (JSONException e) {
            e.printStackTrace();
          }
        }else{
          return "Scan Front Side of Document";
        }
      case RecogEngine.SCAN_TITLE_MRZ_PDF417_BACK: // for back side MRZ and PDF417
        if (accuraTitleMsg.has("SCAN_TITLE_MRZ_PDF417_BACK")){
          try {
            if(accuraTitleMsg.getString("SCAN_TITLE_MRZ_PDF417_FRONT").equals("")){
              return "";
            }else {
              return accuraTitleMsg.getString("SCAN_TITLE_MRZ_PDF417_BACK");
            }
          } catch (JSONException e) {
            e.printStackTrace();
          }
        }else {
          return "Now Scan Back Side of Document";
        }
      case RecogEngine.SCAN_TITLE_DLPLATE: // for DL plate
        if (accuraTitleMsg.has("SCAN_TITLE_DLPLATE")){
          try {
            if(accuraTitleMsg.getString("SCAN_TITLE_DLPLATE").equals("")){
              return "";
            }else {
              return accuraTitleMsg.getString("SCAN_TITLE_DLPLATE");
            }
          } catch (JSONException e) {
            e.printStackTrace();
          }
        }else{
          return "Scan Number Plate";
        }
      default:return "";
    }
  }

  private String getErrorMessage(String s) {
    switch (s) {
      case RecogEngine.ACCURA_ERROR_CODE_MOTION:
        if (accuraErrorConfg.has("ACCURA_ERROR_CODE_MOTION")){
          try {
            return accuraErrorConfg.getString("ACCURA_ERROR_CODE_MOTION");
          } catch (JSONException e) {
            e.printStackTrace();
          }
        }else {
          return "Keep Document Steady";
        }
      case RecogEngine.ACCURA_ERROR_CODE_DOCUMENT_IN_FRAME:
        if (accuraErrorConfg.has("ACCURA_ERROR_CODE_DOCUMENT_IN_FRAME")){
          try {
            return accuraErrorConfg.getString("ACCURA_ERROR_CODE_DOCUMENT_IN_FRAME");
          } catch (JSONException e) {
            e.printStackTrace();
          }
        }else {
          return "Keep document in frame";
        }
      case RecogEngine.ACCURA_ERROR_CODE_BRING_DOCUMENT_IN_FRAME:
        if (accuraErrorConfg.has("ACCURA_ERROR_CODE_BRING_DOCUMENT_IN_FRAME")){
          try {
            return accuraErrorConfg.getString("ACCURA_ERROR_CODE_BRING_DOCUMENT_IN_FRAME");
          } catch (JSONException e) {
            e.printStackTrace();
          }
        }else {
          return "Bring card near to frame.";
        }
      case RecogEngine.ACCURA_ERROR_CODE_PROCESSING:
        if (accuraErrorConfg.has("ACCURA_ERROR_CODE_PROCESSING")){
          try {
            return  accuraErrorConfg.getString("ACCURA_ERROR_CODE_PROCESSING");
          } catch (JSONException e) {
            e.printStackTrace();
          }
        }else{
          return "Processing...";
        }
      case RecogEngine.ACCURA_ERROR_CODE_BLUR_DOCUMENT:
        if(accuraErrorConfg.has("ACCURA_ERROR_CODE_BLUR_DOCUMENT")){
          try {
            return accuraErrorConfg.getString("ACCURA_ERROR_CODE_BLUR_DOCUMENT");
          } catch (JSONException e) {
            e.printStackTrace();
          }
        }else {
          return "Blur detect in document";
        }
      case RecogEngine.ACCURA_ERROR_CODE_FACE_BLUR:
        if (accuraErrorConfg.has("ACCURA_ERROR_CODE_FACE_BLUR")){
          try {
            return accuraErrorConfg.getString("ACCURA_ERROR_CODE_FACE_BLUR");
          } catch (JSONException e) {
            e.printStackTrace();
          }
        }else {
          return "Blur detected over face";
        }
      case RecogEngine.ACCURA_ERROR_CODE_GLARE_DOCUMENT:
        if (accuraErrorConfg.has("ACCURA_ERROR_CODE_GLARE_DOCUMENT")){
          try {
            return accuraErrorConfg.getString("ACCURA_ERROR_CODE_GLARE_DOCUMENT");
          } catch (JSONException e) {
            e.printStackTrace();
          }
        }else{
          return "Glare detect in document";
        }
      case RecogEngine.ACCURA_ERROR_CODE_HOLOGRAM:
        if (accuraErrorConfg.has("ACCURA_ERROR_CODE_HOLOGRAM")){
          try {
            return accuraErrorConfg.getString("ACCURA_ERROR_CODE_HOLOGRAM");
          } catch (JSONException e) {
            e.printStackTrace();
          }
        }else{
          return "Hologram Detected";
        }
      case RecogEngine.ACCURA_ERROR_CODE_DARK_DOCUMENT:
        if (accuraErrorConfg.has("ACCURA_ERROR_CODE_DARK_DOCUMENT")){
          try {
            return accuraErrorConfg.getString("ACCURA_ERROR_CODE_DARK_DOCUMENT");
          } catch (JSONException e) {
            e.printStackTrace();
          }
        }else{
          return "Low lighting detected";
        }
      case RecogEngine.ACCURA_ERROR_CODE_PHOTO_COPY_DOCUMENT:
        if (accuraErrorConfg.has("ACCURA_ERROR_CODE_PHOTO_COPY_DOCUMENT")){
          try {
            return accuraErrorConfg.getString("ACCURA_ERROR_CODE_PHOTO_COPY_DOCUMENT");
          } catch (JSONException e) {
            e.printStackTrace();
          }
        }else{
          return "Can not accept Photo Copy Document";
        }
      case RecogEngine.ACCURA_ERROR_CODE_FACE:
                if (accuraErrorConfg.has("ACCURA_ERROR_CODE_FACE")){
        try {
          return accuraErrorConfg.getString("ACCURA_ERROR_CODE_FACE");
        } catch (JSONException e) {
          e.printStackTrace();
        }
                }else{
                    return "Face not detected";
                }
      case RecogEngine.ACCURA_ERROR_CODE_MRZ:
        if (accuraErrorConfg.has("ACCURA_ERROR_CODE_MRZ")){
          try {
            return accuraErrorConfg.getString("ACCURA_ERROR_CODE_MRZ");
          } catch (JSONException e) {
            e.printStackTrace();
          }
        }else{
          return "MRZ not detected";
        }
      case RecogEngine.ACCURA_ERROR_CODE_PASSPORT_MRZ:
        if (accuraErrorConfg.has("ACCURA_ERROR_CODE_PASSPORT_MRZ")){
          try {
            return accuraErrorConfg.getString("ACCURA_ERROR_CODE_PASSPORT_MRZ");
          } catch (JSONException e) {
            e.printStackTrace();
          }
        }else{
          return "Passport MRZ not detected";
        }
      case RecogEngine.ACCURA_ERROR_CODE_ID_MRZ:
        if(accuraErrorConfg.has("ACCURA_ERROR_CODE_ID_MRZ")){
          try {
            return accuraErrorConfg.getString("ACCURA_ERROR_CODE_ID_MRZ");
          } catch (JSONException e) {
            e.printStackTrace();
          }
        }else{
          return "ID card MRZ not detected";
        }
      case RecogEngine.ACCURA_ERROR_CODE_VISA_MRZ:
        if (accuraErrorConfg.has("ACCURA_ERROR_CODE_VISA_MRZ")){
          try {
            return accuraErrorConfg.getString("ACCURA_ERROR_CODE_VISA_MRZ");
          } catch (JSONException e) {
            e.printStackTrace();
          }
        }else{
          return "Visa MRZ not detected";
        }
      case RecogEngine.ACCURA_ERROR_CODE_WRONG_SIDE:
        if (accuraErrorConfg.has("ACCURA_ERROR_CODE_WRONG_SIDE")){
          try {
            return accuraErrorConfg.getString("ACCURA_ERROR_CODE_WRONG_SIDE");
          } catch (JSONException e) {
            e.printStackTrace();
          }
        }else {
          return "Scanning wrong side of document";
        }
      case RecogEngine.ACCURA_ERROR_CODE_UPSIDE_DOWN_SIDE:
        if (accuraErrorConfg.has("ACCURA_ERROR_CODE_UPSIDE_DOWN_SIDE")){
          try {
            return accuraErrorConfg.getString("ACCURA_ERROR_CODE_UPSIDE_DOWN_SIDE");
          } catch (JSONException e) {
            e.printStackTrace();
          }
        }else{
          return "Document is upside down. Place it properly";
        }
      default:
        return s;
    }
  }

  @Override
  public void onError(final String errorMessage) {
    // stop ocr if failed
    tvScanMessage.setText(errorMessage);
    Runnable runnable = () -> Toast.makeText(OcrActivity.this, errorMessage, Toast.LENGTH_LONG).show();
    runOnUiThread(runnable);
  }

  @Override
  protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
    super.onActivityResult(requestCode, resultCode, data);
    if (resultCode == RESULT_OK) {
      if (requestCode == 101) {
        Runtime.getRuntime().gc(); // To clear garbage
        //<editor-fold desc="Call CameraView#startOcrScan(true) To start again Camera Preview
        //And CameraView#startOcrScan(false) To start first time">
        if (cameraView != null) {
          isBack = false;
          cameraView.setFrontSide();
          AccuraLog.loge(TAG, "Rescan Document");
          cameraView.startOcrScan(true);
          if (types_dialog != null && types_dialog.isShowing()) types_dialog.dismiss();
        }
        //</editor-fold>
      }
    }
  }

  /**
   * Set Barcode selection Dialog to Scan only selected barcode format
   * See {@link BarcodeFormat} to get All Barcode format
   * And use Array List {@link BarcodeFormat#getList()}
   */
  int mposition = 0;
  private void barcodeFormatDialog() {
//        btn_barcode_selection.setOnClickListener(v -> {
//            if (cameraView != null) cameraView.stopCamera();
//            types_dialog.show();
//        });
//        List<BarcodeFormat> CODE_NAMES = BarcodeFormat.getList();
//        types_dialog = new Dialog(this);
////        types_dialog.setContentView(R.layout.dialog_barcode_type);
//        types_dialog.setCanceledOnTouchOutside(false);
//        types_dialog.setOnKeyListener((dialog, keyCode, event) -> {
//            if (event.getKeyCode() == KeyEvent.KEYCODE_BACK) {
//                types_dialog.cancel();
//            }
//            return true;
//        });
//        types_dialog.setOnCancelListener(dialog -> {
//            if (cameraView != null) cameraView.startCamera();
//        });
//        cameraView.setBarcodeFormat(BarcodeFormat.BARCODE_AZTEC);

//        cameraView.setBarcodeFormat(CODE_NAMES.get(mposition).formatsType);


//        View im_close = types_dialog.findViewById(R.id.btn_close);
//        im_close.setOnClickListener(v -> {
//            types_dialog.cancel();
//        });
//        ListView listView = types_dialog.findViewById(R.id.typelv);

//        BarCodeFormatListAdapter adapter = new BarCodeFormatListAdapter(this, CODE_NAMES);
//        listView.setAdapter(adapter);

//        listView.setOnItemClickListener((parent, view, position, id) -> {
//            for (int i = 0; i < CODE_NAMES.size(); i++) {
//                CODE_NAMES.get(i).isSelected = i == position;
//            }
//            adapter.notifyDataSetChanged();
//            mposition = position;
    // set barcode format to scan only selected barcode and by default scan all barcode
//cameraView.setBarcodeFormat(CODE_NAMES.get(mposition).formatsType);
//            types_dialog.cancel();
//        });

  }

  private JSONObject setMRZData(RecogResult recogResult) {
    JSONObject frontResult = new JSONObject();
    try {
      frontResult.put("MRZ", recogResult.lines);
      frontResult.put("Document Type", recogResult.docType);
      frontResult.put("First Name", recogResult.givenname);
      frontResult.put("First Name", recogResult.givenname);
      frontResult.put("Last Name", recogResult.surname);
      frontResult.put("Document No.", recogResult.docnumber);
      frontResult.put("Document check No.", recogResult.docchecksum);
      frontResult.put("Correct Document check No.", recogResult.correctdocchecksum);
      frontResult.put("Country", recogResult.country);
      frontResult.put("Nationality", recogResult.nationality);
      String s = (recogResult.sex.equals("M")) ? "MALE" : ((recogResult.sex.equals("F")) ? "FEMALE" : ((recogResult.sex.equals("X")) ? "OTHER" : recogResult.sex));
      frontResult.put("Sex", s);
      frontResult.put("Date of Birth", recogResult.birth);
      frontResult.put("Birth Check No.", recogResult.birthchecksum);
      frontResult.put("Correct Birth Check No.", recogResult.correctbirthchecksum);
      frontResult.put("Date of Expiry", recogResult.expirationdate);
      frontResult.put("Expiration Check No.", recogResult.expirationchecksum);
      frontResult.put("Correct Expiration Check No.", recogResult.correctexpirationchecksum);
      frontResult.put("Date Of Issue", recogResult.issuedate);
      frontResult.put("Department No.", recogResult.departmentnumber);
      frontResult.put("Other ID", recogResult.otherid);
      frontResult.put("Other ID Check", recogResult.otheridchecksum);
      frontResult.put("Other ID2", recogResult.otherid2);
      frontResult.put("Second Row Check No.", recogResult.secondrowchecksum);
      frontResult.put("Correct Second Row Check No.", recogResult.correctsecondrowchecksum);
    } catch (Exception e) {
      e.printStackTrace();
    }
    return frontResult;
  }

  public static OkHttpClient getUnsafeOkHttpClient() {
    try {
      // Create a trust manager that does not validate certificate chains
      final TrustManager[] trustAllCerts = new TrustManager[] {
        new X509TrustManager() {
          @Override
          public void checkClientTrusted(java.security.cert.X509Certificate[] chain, String authType) throws CertificateException {
          }

          @Override
          public void checkServerTrusted(java.security.cert.X509Certificate[] chain, String authType) throws CertificateException {
          }

          @Override
          public java.security.cert.X509Certificate[] getAcceptedIssuers() {
            return new java.security.cert.X509Certificate[]{};
          }
        }
      };

      // Install the all-trusting trust manager
      final SSLContext sslContext = SSLContext.getInstance("SSL");
      sslContext.init(null, trustAllCerts, new java.security.SecureRandom());

      // Create an ssl socket factory with our all-trusting manager
      final SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory();

      OkHttpClient.Builder builder = new OkHttpClient.Builder();
      builder.sslSocketFactory(sslSocketFactory, (X509TrustManager)trustAllCerts[0]);
      builder.hostnameVerifier(new HostnameVerifier() {
        @Override
        public boolean verify(String hostname, SSLSession session) {
          return true;
        }
      });

      OkHttpClient okHttpClient = builder.build();
      return okHttpClient;
    } catch (Exception e) {
      throw new RuntimeException(e);
    }
  }
}
