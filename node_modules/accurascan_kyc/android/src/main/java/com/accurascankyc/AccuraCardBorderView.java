package com.accurascankyc;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Path;
import android.util.AttributeSet;
import android.widget.RelativeLayout;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

public class AccuraCardBorderView extends RelativeLayout {

    private Paint mBorderPaint;
    private boolean cornerBox = false;
    private int mCornerWidth = 150;
    private int mBorderColor = 0xFFCC0000;
    private int mBorderWidth = 10;

    public AccuraCardBorderView(@NonNull Context context) {
        super(context);
        init();
    }

    public AccuraCardBorderView(@NonNull Context context, @Nullable AttributeSet attrs) {
        super(context, attrs);
        init();
    }

    public AccuraCardBorderView(@NonNull Context context, @Nullable AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
        init();
    }

    private void init() {
        mBorderPaint = new Paint(Paint.DITHER_FLAG);
        mBorderPaint.setStyle(Paint.Style.STROKE);
        mBorderPaint.setStrokeWidth(mBorderWidth);
        mBorderPaint.setColor(mBorderColor);
    }

    public void setCornerBox(boolean cornerBox) {
        this.cornerBox = cornerBox;
    }

    public void setCornerWidth(int mCornerWidth) {
        this.mCornerWidth = mCornerWidth;
    }

    public void setBorderColor(int mBorderColor) {
        this.mBorderColor = mBorderColor;
    }

    public void setBorderWidth(int mBorderWidth) {
        this.mBorderWidth = mBorderWidth;
    }

    @Override
    protected void dispatchDraw(Canvas canvas) {
        int count = canvas.save();
        mBorderPaint.setStrokeWidth(mBorderWidth);
        mBorderPaint.setColor(mBorderColor);
        if (cornerBox) {
            canvas.drawPath(createCornersPath(0, 0, getWidth(), getHeight(), mCornerWidth), mBorderPaint);
        } else {
            canvas.drawPath(createRectanglePath(0, 0, getWidth(), getHeight()), mBorderPaint);
        }
        super.dispatchDraw(canvas);
        canvas.restoreToCount(count);
    }

    private Path createCornersPath(int left, int top, int right, int bottom, int cornerWidth){
        Path path = new Path();

        path.moveTo(left, top + cornerWidth);
        path.lineTo(left, top);
        path.lineTo(left + cornerWidth, top);

        path.moveTo(right - cornerWidth, top);
        path.lineTo(right, top);
        path.lineTo(right , top + cornerWidth);

        path.moveTo(left, bottom - cornerWidth);
        path.lineTo(left, bottom);
        path.lineTo(left + cornerWidth, bottom);

        path.moveTo(right - cornerWidth, bottom);
        path.lineTo(right, bottom);
        path.lineTo(right, bottom - cornerWidth);

        return path;
    }

    private Path createRectanglePath(int left, int top, int right, int bottom){
        Path path = new Path();
        path.addRect(left, top, right, bottom, Path.Direction.CW);
        return path;
    }
}
