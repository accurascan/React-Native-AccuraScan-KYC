package com.accurascankyc;

import android.app.Activity;
import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.graphics.Bitmap;
import android.graphics.Color;
import android.os.Bundle;
import android.os.Handler;
import android.view.View;
import android.widget.ImageView;
import android.widget.Toast;

import androidx.annotation.Nullable;

import com.accurascan.facedetection.LivenessCustomization;
import com.accurascan.facedetection.SelfieCameraActivity;
import com.accurascan.facedetection.model.AccuraVerificationResult;
import com.accurascan.facematch.util.BitmapHelper;
import com.androidnetworking.AndroidNetworking;
import com.facedetection.FMCameraScreenCustomization;
import com.facedetection.SelfieFMCameraActivity;
import com.facedetection.model.AccuraFMCameraModel;
import com.inet.facelock.callback.FaceCallback;
import com.inet.facelock.callback.FaceDetectionResult;
import com.inet.facelock.callback.FaceHelper;

import org.json.JSONException;
import org.json.JSONObject;

import java.security.cert.CertificateException;

import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSession;
import javax.net.ssl.SSLSocketFactory;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;

import okhttp3.OkHttpClient;

public class OcrResultActivity extends Activity implements FaceCallback {

  public static Bitmap face1 ,sface,detectFace1,detectFace2;
  private final int ACCURA_LIVENESS_CAMERA = 101;
  private final int ACCURA_FACEMATCH_CAMERA = 102;

  public static JSONObject faceConfig;
  public static JSONObject livenessConfig;
  public static String faceLicensePath;
  public static Boolean isDynamic;

  ImageView ivUserProfile2;
  View loutImg2;
  public static int which;
  private FaceHelper faceHelper;
  //    private TextView
  JSONObject results = new JSONObject();

  private boolean isFaceMatch = false, isLiveness = false;

  protected void onCreate(Bundle savedInstanceState) {

    // AndroidNetworking.initialize(this, getUnsafeOkHttpClient());

    faceHelper = new FaceHelper(this);
    faceHelper.setFaceMatchCallBack(this);
//    faceHelper.initEngine();
    if(isDynamic){
      System.out.println("FaceMatch activity isDynamic true");
      faceHelper.initEngine(faceLicensePath);
    }else{
      System.out.println("FaceMatch activity  isDynamic false");
      faceHelper.initEngine();
    }
    if (getIntent().getIntExtra("app_orientation", 1) != 0) {
      setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
    } else {
      setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
    }
    super.onCreate(savedInstanceState);
//        setContentView("activity_ocr_result","layout");
//        setContentView(R.layout.activity_ocr_result);
  }



  @Override
  protected void onStart() {
    super.onStart();
  }

  public void handleVerificationSuccessResult(final AccuraVerificationResult result) {
    if (result != null) {
//            showProgressDialog();

      if (face1 != null) {
        faceHelper.setInputImage(face1);
        if (result.getFaceBiometrics() != null) {
          if (result.getLivenessResult() == null) {
            AccurascanKycModule.onResult.invoke("101","Retry...", null);
            finish();
          }
          if (result.getLivenessResult().getLivenessStatus()) {
            String lvscore = result.getLivenessResult().getLivenessScore() * 100 + "";
            try {
              results.put("score",lvscore);
            } catch (JSONException e) {
              e.printStackTrace();
            }
            Bitmap face2 = sface = result.getFaceBiometrics();
//                                Glide.with(OcrResultActivity.this).load(face2).centerCrop().into(ivUserProfile2);
            if (face2 != null) {
              faceHelper.setMatchImage(face2);
            }


          }
        }
      }else{
        String fileDir = getFilesDir().getAbsolutePath();

        if (result.getLivenessResult() == null) {
          AccurascanKycModule.onResult.invoke("101","Retry...", null);
          finish();
        }else{
        if (result.getLivenessResult().getLivenessStatus()) {
          String lvscore = result.getLivenessResult().getLivenessScore() * 100 + "";
          try {
            results.put("score",lvscore);
            results.put("detect", AccurascanKycModule.getImageUri(result.getFaceBiometrics(), "detect", fileDir));
          } catch (JSONException e) {
            e.printStackTrace();
          }

          AccurascanKycModule.onResult.invoke(null,results.toString());
          finish();
//          Bitmap face2 = sface = result.getFaceBiometrics();
//                                Glide.with(OcrResultActivity.this).load(face2).centerCrop().into(ivUserProfile2);
        }else{
          AccurascanKycModule.onResult.invoke("102","Retry...", null);
          finish();
        }
       }
      }
    }
  }

  public void handleVerificationSuccessResult(final AccuraFMCameraModel result) {
    try {
      if (result != null) {
        if (faceHelper!=null && face1 != null) {
          faceHelper.setInputImage(face1);
        }
        String fileDir = getFilesDir().getAbsolutePath();
        if (result.getFaceBiometrics() != null) {
          Bitmap nBmp = sface = result.getFaceBiometrics();
          faceHelper.setMatchImage(nBmp);
          results.put("detect", AccurascanKycModule.getImageUri(nBmp, "detect", fileDir));
        }
      }
    } catch (JSONException e) {
      e.printStackTrace();
    }
  }


  private void setLivenessData(String livenessScore) {

//        tvLivenessScore.setText(String.format("%s %%", livenessScore.length() > 5 ? livenessScore.substring(0, 5) : livenessScore));
//        tvLivenessScore.setVisibility(View.VISIBLE);
//        tvFaceMatchScore.setVisibility(View.VISIBLE);
  }

  @Override
  protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
    super.onActivityResult(requestCode, resultCode, data);
//        if (resultCode == RESULT_OK) {
    if (requestCode == 201 && data != null) {
      AccuraVerificationResult result = data.getParcelableExtra("Accura.liveness");
      if (result == null) {
        AccurascanKycModule.onResult.invoke("103","Retry...", null);
        this.finish();
      }
      if (result.getStatus().equals("1")) {
        handleVerificationSuccessResult(result);
      } else {
        Toast.makeText(this, result.getErrorMessage(), Toast.LENGTH_SHORT).show();
        AccurascanKycModule.onResult.invoke("104",result.getErrorMessage(), null);
        finish();
      }
    } else if (requestCode == 102 && data != null) {
      AccuraFMCameraModel result = data.getParcelableExtra("Accura.fm");
      if (result == null) {
        AccurascanKycModule.onResult.invoke("105","Retry...", null);
        this.finish();
      }
      if (result.getStatus().equals("1")) {
        handleVerificationSuccessResult(result);
      } else {
        Toast.makeText(this,"Retry..." , Toast.LENGTH_SHORT).show();
        AccurascanKycModule.onResult.invoke("106","Retry...", null);
        this.finish();
      }
    } else{
      Toast.makeText(this,"Retry..." , Toast.LENGTH_SHORT).show();
      AccurascanKycModule.onResult.invoke("107","Retry...", null);
      this.finish();
    }
  }

  @Override
  protected void onDestroy() {
    super.onDestroy();
    if (faceHelper != null) {
      faceHelper.closeEngine();
    }
    Runtime.getRuntime().gc();
  }

  @Override
  public void onBackPressed() {
    AccurascanKycModule.onResult.invoke("Exit","Exit",results.toString());
    finish();
  }

//    public void onCLickFaceMatch(View view) {
//        if (view.getId() == R.id.btn_fm) {
//            isFaceMatch = true;
//            isLiveness = false;
//        } else if (view.getId() == R.id.btn_liveness) {
//            isFaceMatch = false;
//            isLiveness = true;
//        }
//        if (faceHelper == null) {
//            faceHelper = new FaceHelper(this);
//            faceHelper.setFaceMatchCallBack(this);
//            faceHelper.initEngine();
//        } else {
//            performClick(isFaceMatch, isLiveness);
//        }
//
//    }

//    private void performClick(boolean isFaceMatch, boolean isLiveness) {
//        if (isFaceMatch) openCamera();
//        else if (isLiveness) openLivenessCamera();
//    }

  private void openLivenessCamera() {
    LivenessCustomization livenessCustomization = new LivenessCustomization();

    try {
      if(livenessConfig.has("backGroundColor")){
        livenessCustomization.backGroundColor =  Color.parseColor(livenessConfig.getString("backGroundColor"));
      }
    } catch (JSONException e) {
      e.printStackTrace();
    }
    try {
      if(livenessConfig.has("closeIconColor")){
        livenessCustomization.closeIconColor = Color.parseColor(livenessConfig.getString("closeIconColor"));
      }
    } catch (JSONException e) {
      e.printStackTrace();
    }
    try {
      if(livenessConfig.has("feedbackBackGroundColor")){
        livenessCustomization.feedbackBackGroundColor = Color.parseColor(livenessConfig.getString("feedbackBackGroundColor"));
      }
    } catch (JSONException e) {
      e.printStackTrace();
    }
    try {
      if(livenessConfig.has("feedbackTextColor")){
        livenessCustomization.feedbackTextColor = Color.parseColor(livenessConfig.getString("feedbackTextColor"));

      }
    } catch (JSONException e) {
      e.printStackTrace();
    }

    if (livenessConfig.has("setFeedbackTextSize")){
      try {
        livenessCustomization.feedbackTextSize = livenessConfig.getInt("setFeedbackTextSize");
      } catch (JSONException e) {
        e.printStackTrace();
      }
    }else{
      livenessCustomization.feedbackTextSize = 18;
    }
    if (livenessConfig.has("setFeedBackframeMessage")){
      try {
        livenessCustomization.feedBackframeMessage = livenessConfig.getString("setFeedBackframeMessage");
      } catch (JSONException e) {
        e.printStackTrace();
      }
    }else {
      livenessCustomization.feedBackframeMessage = "Frame Your Face";

    }
    if (livenessConfig.has("setFeedBackAwayMessage")){
      try {
        livenessCustomization.feedBackAwayMessage = livenessConfig.getString("setFeedBackAwayMessage");
      } catch (JSONException e) {
        e.printStackTrace();
      }
    }else {
      livenessCustomization.feedBackAwayMessage = "Move Phone Away";
    }
    if (livenessConfig.has("setFeedBackOpenEyesMessage")){
      try {
        livenessCustomization.feedBackOpenEyesMessage = livenessConfig.getString("setFeedBackOpenEyesMessage");
      } catch (JSONException e) {
        e.printStackTrace();
      }
    }else {
      livenessCustomization.feedBackOpenEyesMessage = "Keep Your Eyes Open";
    }
    if (livenessConfig.has("setFeedBackCloserMessage")){
      try {
        livenessCustomization.feedBackCloserMessage = livenessConfig.getString("setFeedBackCloserMessage");
      } catch (JSONException e) {
        e.printStackTrace();
      }
    }else {
      livenessCustomization.feedBackCloserMessage = "Move Phone Closer";
    }
    if (livenessConfig.has("setFeedBackCenterMessage")){
      try {
        livenessCustomization.feedBackCenterMessage = livenessConfig.getString("setFeedBackCenterMessage");
      } catch (JSONException e) {
        e.printStackTrace();
      }
    }else {
      livenessCustomization.feedBackCenterMessage = "Move Phone Center";
    }
    if (livenessConfig.has("setFeedbackMultipleFaceMessage")){
      try {
        livenessCustomization.feedBackMultipleFaceMessage = livenessConfig.getString("setFeedbackMultipleFaceMessage");
      } catch (JSONException e) {
        e.printStackTrace();
      }
    }else {
      livenessCustomization.feedBackMultipleFaceMessage = "Multiple Face Detected";
    }
    if (livenessConfig.has("setFeedBackFaceSteadymessage")){
      try {
        livenessCustomization.feedBackHeadStraightMessage = livenessConfig.getString("setFeedBackFaceSteadymessage");
      } catch (JSONException e) {
        e.printStackTrace();
      }
    }else {
      livenessCustomization.feedBackHeadStraightMessage = "Keep Your Head Straight";
    }
    if (livenessConfig.has("setFeedBackBlurFaceMessage")){
      try {
        livenessCustomization.feedBackBlurFaceMessage = livenessConfig.getString("setFeedBackBlurFaceMessage");
      } catch (JSONException e) {
        e.printStackTrace();
      }
    }else {
      livenessCustomization.feedBackBlurFaceMessage = "Blur Detected Over Face";
    }
    if (livenessConfig.has("setFeedBackLowLightMessage")){
      try {
        livenessCustomization.feedBackLowLightMessage = livenessConfig.getString("setFeedBackLowLightMessage");
      } catch (JSONException e) {
        e.printStackTrace();
      }
    }else {
      livenessCustomization.feedBackLowLightMessage = "Low light detected";
    }
    if (livenessConfig.has("setFeedBackGlareFaceMessage")){
      try {
        livenessCustomization.feedBackGlareFaceMessage = livenessConfig.getString("setFeedBackGlareFaceMessage");
      } catch (JSONException e) {
        e.printStackTrace();
      }
    }else {
      livenessCustomization.feedBackGlareFaceMessage = "Glare Detected";
    }
    if (livenessConfig.has("setBlurPercentage")){
      try {
        livenessCustomization.setBlurPercentage(livenessConfig.getInt("setBlurPercentage"));
      } catch (JSONException e) {
        e.printStackTrace();
      }
    }else {
      livenessCustomization.setBlurPercentage(80);
    }
    if (livenessConfig.has("setGlarePercentage_0") && livenessConfig.has("setGlarePercentage_1")){
      try {
        livenessCustomization.setGlarePercentage(livenessConfig.getInt("setGlarePercentage_0"),livenessConfig.getInt("setGlarePercentage_1"));
      } catch (JSONException e) {
        e.printStackTrace();
      }
    }else {
      livenessCustomization.setGlarePercentage(-1, -1);
    }
    if (livenessConfig.has("feedbackLowLightTolerence")){
      try {
        livenessCustomization.setLowLightTolerence(livenessConfig.getInt("feedbackLowLightTolerence"));
      } catch (JSONException e) {
        e.printStackTrace();
      }
    }else {
      livenessCustomization.setLowLightTolerence(-1/*lowLightTolerence*/);
    }
    if (livenessConfig.has("setApiKey")){
      try {
        livenessCustomization.setApiKey(livenessConfig.getString("setApiKey"));
      } catch (JSONException e) {
        e.printStackTrace();
      }
    }else {
      livenessCustomization.setApiKey("");
    }
    if (livenessConfig.has("setfeedbackDialogMessage")){
      try {
        livenessCustomization.feedbackDialogMessage = livenessConfig.getString("setfeedbackDialogMessage");
      } catch (JSONException e) {
        e.printStackTrace();
      }
    }else {
      livenessCustomization.feedbackDialogMessage = "Loading...";
    }
    try {
      if(livenessConfig.has("feedBackProcessingMessage")){
        livenessCustomization.feedBackProcessingMessage = livenessConfig.getString("feedBackProcessingMessage");
      }
    } catch (JSONException e) {
      e.printStackTrace();
    }
    try {
      if(livenessConfig.has("isShowLogo")){
        livenessCustomization.showlogo = livenessConfig.getInt("isShowLogo"); // Set 0 to hide logo from selfie camera screen
      }
    } catch (JSONException e) {
      e.printStackTrace();
    }

    if (livenessConfig.has("setDefaultText")){
      try {
        livenessCustomization.feedBackTopMessage = livenessConfig.getString("setDefaultText");
      } catch (JSONException e) {
        e.printStackTrace();
      }
    }
      //livenessCustomization.logoIcon = R.drawable.accura_liveness_logo; // To set your custom logo
    //livenessCustomization.facing = LivenessCustomization.CAMERA_FACING_FRONT;


    Intent intent = null;
    try {
      intent = SelfieCameraActivity.getCustomIntent(this, livenessCustomization, livenessConfig.getString("setLivenessURL"));
    } catch (JSONException e) {
      e.printStackTrace();
    }
    startActivityForResult(intent, 201);
  }

  private void openCamera()  {

    FMCameraScreenCustomization cameraScreenCustomization = new FMCameraScreenCustomization();

    try {
      if(faceConfig.has("backGroundColor")){
        cameraScreenCustomization.backGroundColor = Color.parseColor(faceConfig.getString("backGroundColor"));
      }
    } catch (JSONException e) {
      e.printStackTrace();
    }
    try {
      if(faceConfig.has("closeIconColor")){
        cameraScreenCustomization.closeIconColor = Color.parseColor(faceConfig.getString("closeIconColor"));
      }
    } catch (JSONException e) {
      e.printStackTrace();
    }
    try {
      if(faceConfig.has("feedbackBackGroundColor")){
        cameraScreenCustomization.feedbackBackGroundColor = Color.parseColor(faceConfig.getString("feedbackBackGroundColor"));
      }
    } catch (JSONException e) {
      e.printStackTrace();
    }
    try {
      if(faceConfig.has("feedbackTextColor")){
        cameraScreenCustomization.feedbackTextColor = Color.parseColor(faceConfig.getString("feedbackTextColor"));
      }
    } catch (JSONException e) {
      e.printStackTrace();
    }
    if (faceConfig.has("setFeedbackTextSize")){
      try {
        cameraScreenCustomization.feedbackTextSize = faceConfig.getInt("setFeedbackTextSize");
      } catch (JSONException e) {
        e.printStackTrace();
      }
    }else{
      cameraScreenCustomization.feedbackTextSize = 18;
    }
    if (faceConfig.has("setFeedBackframeMessage")){
      try {
        cameraScreenCustomization.feedBackframeMessage = faceConfig.getString("setFeedBackframeMessage");
      } catch (JSONException e) {
        e.printStackTrace();
      }
    }else{
      cameraScreenCustomization.feedBackframeMessage = "Frame Your Face";
    }
    if (faceConfig.has("setFeedBackAwayMessage")){
      try {
        cameraScreenCustomization.feedBackAwayMessage = faceConfig.getString("setFeedBackAwayMessage");
      } catch (JSONException e) {
        e.printStackTrace();
      }
    }else{
      cameraScreenCustomization.feedBackAwayMessage = "Move Phone Away";
    }
    if (faceConfig.has("setFeedBackOpenEyesMessage")){
      try {
        cameraScreenCustomization.feedBackOpenEyesMessage = faceConfig.getString("setFeedBackOpenEyesMessage");
      } catch (JSONException e) {
        e.printStackTrace();
      }
    }else{
      cameraScreenCustomization.feedBackOpenEyesMessage = "Keep Your Eyes Open";
    }
    if (faceConfig.has("setFeedBackCloserMessage")){
      try {
        cameraScreenCustomization.feedBackCloserMessage = faceConfig.getString("setFeedBackCloserMessage");
      } catch (JSONException e) {
        e.printStackTrace();
      }
    }else{
      cameraScreenCustomization.feedBackCloserMessage = "Move Phone Closer";
    }
    if (faceConfig.has("setFeedBackCenterMessage")){
      try {
        cameraScreenCustomization.feedBackCenterMessage = faceConfig.getString("setFeedBackCenterMessage");
      } catch (JSONException e) {
        e.printStackTrace();
      }
    }else{
      cameraScreenCustomization.feedBackCenterMessage = "Move Phone Center";
    }
    if (faceConfig.has("setFeedbackMultipleFaceMessage")){
      try {
        cameraScreenCustomization.feedBackMultipleFaceMessage = faceConfig.getString("setFeedbackMultipleFaceMessage");
      } catch (JSONException e) {
        e.printStackTrace();
      }
    }else{
      cameraScreenCustomization.feedBackMultipleFaceMessage = "Multiple Face Detected";
    }
    if (faceConfig.has("setFeedBackFaceSteadymessage")){
      try {
        cameraScreenCustomization.feedBackHeadStraightMessage = faceConfig.getString("setFeedBackFaceSteadymessage");
      } catch (JSONException e) {
        e.printStackTrace();
      }
    }else{
      cameraScreenCustomization.feedBackHeadStraightMessage = "Keep Your Head Straight";

    }
    if (faceConfig.has("setFeedBackLowLightMessage")){
      try {
        cameraScreenCustomization.feedBackLowLightMessage = faceConfig.getString("setFeedBackLowLightMessage");
      } catch (JSONException e) {
        e.printStackTrace();
      }
    }else{
      cameraScreenCustomization.feedBackLowLightMessage = "Low light detected";
    }
    if (faceConfig.has("setFeedBackBlurFaceMessage")){
      try {
        cameraScreenCustomization.feedBackBlurFaceMessage = faceConfig.getString("setFeedBackBlurFaceMessage");
      } catch (JSONException e) {
        e.printStackTrace();
      }
    }else{
      cameraScreenCustomization.feedBackBlurFaceMessage = "Blur Detected Over Face";
    }
    if (faceConfig.has("setFeedBackGlareFaceMessage")){
      try {
        cameraScreenCustomization.feedBackGlareFaceMessage = faceConfig.getString("setFeedBackGlareFaceMessage");
      } catch (JSONException e) {
        e.printStackTrace();
      }
    }else{
      cameraScreenCustomization.feedBackGlareFaceMessage = "Glare Detected";
    }
    if (faceConfig.has("setBlurPercentage")){
      try {
        cameraScreenCustomization.setBlurPercentage(faceConfig.getInt("setBlurPercentage"));
      } catch (JSONException e) {
        e.printStackTrace();
      }
    }else{
      cameraScreenCustomization.setBlurPercentage(80);
    }
    if (faceConfig.has("setGlarePercentage_0") && faceConfig.has("setGlarePercentage_1")){
      try {
        cameraScreenCustomization.setGlarePercentage(faceConfig.getInt("setGlarePercentage_0"),faceConfig.getInt("setGlarePercentage_1"));
      } catch (JSONException e) {
        e.printStackTrace();
      }
    }else{
      cameraScreenCustomization.setGlarePercentage(-1, -1);
    }
    if (faceConfig.has("setfeedbackDialogMessage")){
      try {
        cameraScreenCustomization.feedbackDialogMessage = faceConfig.getString("setfeedbackDialogMessage");
      } catch (JSONException e) {
        e.printStackTrace();
      }
    }else {
      cameraScreenCustomization.feedbackDialogMessage = "Loading...";
    }
    if (faceConfig.has("setfeedBackProcessingMessage")){
      try {
        cameraScreenCustomization.feedBackProcessingMessage = faceConfig.getString("setfeedBackProcessingMessage");
      } catch (JSONException e) {
        e.printStackTrace();
      }
    }else{
      cameraScreenCustomization.feedBackProcessingMessage = "Processing...";
    }
    if (faceConfig.has("isShowLogo")){
      try {
        cameraScreenCustomization.showlogo = faceConfig.getInt("isShowLogo"); // Set 0 if hide logo
      } catch (JSONException e) {
        e.printStackTrace();
      }
    }else{
      cameraScreenCustomization.showlogo = 1; // Set 0 if hide logo
    }
    if (faceConfig.has("setLowLightTolerence")){
      try {
        cameraScreenCustomization.setLowLightTolerence(faceConfig.getInt("setLowLightTolerence"));
      } catch (JSONException e) {
        e.printStackTrace();
      }

    }else {
      cameraScreenCustomization.setLowLightTolerence(-1);
    }
    //cameraScreenCustomization.logoIcon = R.drawable.accura_fm_logo; // To set your custom logo

    //cameraScreenCustomization.facing = FMCameraScreenCustomization.CAMERA_FACING_FRONT;
    Intent intent = SelfieFMCameraActivity.getCustomIntent(this, cameraScreenCustomization);
    startActivityForResult(intent, ACCURA_FACEMATCH_CAMERA);

  }

  @Override
  public void onFaceMatch(float score) {
    if (which == 0) {
      String fileDir = getFilesDir().getAbsolutePath();
      if (face1 != null && sface != null) {
        try {
          results.put("score", score);
          results.put("detect", AccurascanKycModule.getImageUri(sface, "detect", fileDir));
        } catch (JSONException e) {
          e.printStackTrace();
        }

        AccurascanKycModule.onResult.invoke(null,results.toString());
        sface = null;
        face1 = null;
        this.finish();
      }
    } else if (which == 1) {
      String fileDir = getFilesDir().getAbsolutePath();
      if (face1 != null && sface != null) {
        try {
          results.put("face_score", score);
          results.put("detect", AccurascanKycModule.getImageUri(sface, "detect", fileDir));
        } catch (JSONException e) {
          e.printStackTrace();
        }

        AccurascanKycModule.onResult.invoke(null,results.toString());
        sface = null;
        face1 = null;
        this.finish();
      }
    }
//        AccurascanKycModule.onResult.success(results.toString());
//
//        finish();
//        tvFaceMatchScore.setText(String.format(getString(R.string.score_formate), score));
//        tvLivenessScore.setVisibility(View.VISIBLE);
//        tvFaceMatchScore.setVisibility(View.VISIBLE);
  }

  @Override
  public void onSetInputImage(Bitmap bitmap) {

  }

  @Override
  public void onSetMatchImage(Bitmap bitmap) {

  }

  @Override
  public void onInitEngine(int i) {
    if (i != -1) {
      if (which == 0){
        openCamera();
      }else if (which == 1){
        openLivenessCamera();
      }
//            performClick(isFaceMatch, isLiveness);
    }
  }

  @Override
  public void onLeftDetect(FaceDetectionResult faceDetectionResult) {
//    Bitmap det = BitmapHelper.createFromARGB(faceDetectionResult.getNewImg(), faceDetectionResult.getNewWidth(), faceDetectionResult.getNewHeight());
//    detectFace1 = faceDetectionResult.getFaceImage(det);
  }

  @Override
  public void onRightDetect(FaceDetectionResult faceDetectionResult) {
    if (faceDetectionResult != null) {
      try {
        Bitmap face2 = BitmapHelper.createFromARGB(faceDetectionResult.getNewImg(), faceDetectionResult.getNewWidth(), faceDetectionResult.getNewHeight());
        detectFace2 = faceDetectionResult.getFaceImage(face2);
      } catch (Exception e) {
        e.printStackTrace();
      }
    }
    //faceHelper.onRightDetect(faceDetectionResult);
  }

  @Override
  public void onExtractInit(int i) {

  }

  public static OkHttpClient getUnsafeOkHttpClient() {
    try {
      // Create a trust manager that does not validate certificate chains
      final TrustManager[] trustAllCerts = new TrustManager[] {
        new X509TrustManager() {
          @Override
          public void checkClientTrusted(java.security.cert.X509Certificate[] chain, String authType) throws CertificateException {
          }

          @Override
          public void checkServerTrusted(java.security.cert.X509Certificate[] chain, String authType) throws CertificateException {
          }

          @Override
          public java.security.cert.X509Certificate[] getAcceptedIssuers() {
            return new java.security.cert.X509Certificate[]{};
          }
        }
      };

      // Install the all-trusting trust manager
      final SSLContext sslContext = SSLContext.getInstance("SSL");
      sslContext.init(null, trustAllCerts, new java.security.SecureRandom());

      // Create an ssl socket factory with our all-trusting manager
      final SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory();

      OkHttpClient.Builder builder = new OkHttpClient.Builder();
      builder.sslSocketFactory(sslSocketFactory, (X509TrustManager)trustAllCerts[0]);
      builder.hostnameVerifier(new HostnameVerifier() {
        @Override
        public boolean verify(String hostname, SSLSession session) {
          return true;
        }
      });

      OkHttpClient okHttpClient = builder.build();
      return okHttpClient;
    } catch (Exception e) {
      throw new RuntimeException(e);
    }
  }

}
