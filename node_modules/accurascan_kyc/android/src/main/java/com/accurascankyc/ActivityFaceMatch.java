package com.accurascankyc;

import android.app.Activity;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.Color;
import android.net.Uri;
import android.os.Bundle;
import android.provider.MediaStore;
import android.util.Log;
import android.widget.Toast;

import com.accurascan.facematch.customview.FaceImageview;
import com.accurascan.facematch.util.BitmapHelper;
import com.accurascankyc.AccurascanKycModule;
import com.accurascankyc.R;
import com.facedetection.FMCameraScreenCustomization;
import com.facedetection.SelfieFMCameraActivity;
import com.facedetection.model.AccuraFMCameraModel;
import com.inet.facelock.callback.FaceCallback;
import com.inet.facelock.callback.FaceDetectionResult;
import com.inet.facelock.callback.FaceHelper;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.IOException;
import java.text.NumberFormat;

public class ActivityFaceMatch extends Activity implements FaceCallback {
  FaceHelper helper;
  Bitmap face1, detectFace1, detectFace2, face2;
  Bundle bundle;
  FaceImageview image1;
  FaceImageview image2;

  int ind;

  public static String sface;
  public static String mface;
  JSONObject results = new JSONObject();
  final private  int PICK_IMAGE = 1;
  private static  final int ACCURA_FACEMATCH_CAMERA = 3;
  public static int which;
  public static int No;
  public static JSONObject faceMatchConfig;
  public static String faceLicensePath;
  public static Boolean isDynamic;

  @Override
  protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);


    helper = new FaceHelper(this);
    helper.setFaceMatchCallBack(this);
//    helper.initEngine();
    if(isDynamic){
//      System.out.println("FaceMatch activity isDynamic true");
      helper.initEngine(faceLicensePath);
    }else{
//      System.out.println("FaceMatch activity  isDynamic false");
      helper.initEngine();
    }

    image1 = new FaceImageview(this);  //initialize the view of front image
    image2 = new FaceImageview(this);
    bundle = getIntent().getExtras();
//        sface = bundle.getString("face1", "");
//        mface = bundle.getString("face2", "");


    if(!sface.equals("")){
      try {
        face1 = MediaStore.Images.Media.getBitmap(this.getContentResolver() , Uri.parse(sface));
        helper.setInputImage(face1);
      } catch (IOException e) {
        e.printStackTrace();
      }
    }
    if(!mface.equals("")){
      try {
        face2 = MediaStore.Images.Media.getBitmap(this.getContentResolver() , Uri.parse(mface));
        helper.setMatchImage(face2);
      } catch (IOException e) {
        e.printStackTrace();
      }
    }

    if (which == 2){
      AccurascanKycModule.face1 = null;
      face1 = null;
      startGallery();
    }else if (which == 4){
      AccurascanKycModule.face2 = null;
      face2 = null;
      startGallery2();
    } else if (which == 1){
      AccurascanKycModule.face1 = null;
      face1 = null;
      ind = No;
      openFaceMatchCamera();
    } else if (which == 3){
      AccurascanKycModule.face2 = null;
      face2 = null;
      ind = No;
      openFaceMatchCamera();
    }
  }

  public void startGallery(){
    ind = No;
    Intent intent = new Intent();
    intent.setType("image/*");
    intent.setAction(Intent.ACTION_GET_CONTENT);
    startActivityForResult(Intent.createChooser(intent, ""), PICK_IMAGE);
  }

  public void startGallery2(){
    ind = No;
    Intent intent = new Intent();
    intent.setType("image/*");
    intent.setAction(Intent.ACTION_GET_CONTENT);
    startActivityForResult(Intent.createChooser(intent, ""), PICK_IMAGE);
  }



  private void openFaceMatchCamera() {


    FMCameraScreenCustomization cameraScreenCustomization = new FMCameraScreenCustomization();

//        cameraScreenCustomization.backGroundColor = getResources().getColor(R.color.fm_camera_Background);
//        cameraScreenCustomization.closeIconColor = getResources().getColor(R.color.fm_camera_CloseIcon);
//        cameraScreenCustomization.feedbackBackGroundColor = getResources().getColor(R.color.fm_camera_feedbackBg);
//        cameraScreenCustomization.feedbackTextColor = getResources().getColor(R.color.fm_camera_feedbackText);
    try {
      if (faceMatchConfig.has("backGroundColor")){
        cameraScreenCustomization.backGroundColor = Color.parseColor(faceMatchConfig.getString("backGroundColor"));
      }
    } catch (JSONException e) {
      e.printStackTrace();
    }
    try {
      if (faceMatchConfig.has("closeIconColor")){
        cameraScreenCustomization.closeIconColor = Color.parseColor(faceMatchConfig.getString("closeIconColor"));
      }
    } catch (JSONException e) {
      e.printStackTrace();
    }
    try {
      if (faceMatchConfig.has("feedbackBackGroundColor")){
        cameraScreenCustomization.feedbackBackGroundColor = Color.parseColor(faceMatchConfig.getString("feedbackBackGroundColor"));
      }
    } catch (JSONException e) {
      e.printStackTrace();
    }
    try {
      if (faceMatchConfig.has("feedbackTextColor")){
        cameraScreenCustomization.feedbackTextColor = Color.parseColor(faceMatchConfig.getString("feedbackTextColor"));
      }
    } catch (JSONException e) {
      e.printStackTrace();
    }
    if (faceMatchConfig.has("setFeedbackTextSize")){
      try {
        cameraScreenCustomization.feedbackTextSize = faceMatchConfig.getInt("setFeedbackTextSize");
      } catch (JSONException e) {
        e.printStackTrace();
      }
    }else{
      cameraScreenCustomization.feedbackTextSize = 18;
    }
    if (faceMatchConfig.has("setFeedBackframeMessage")){
      try {
        cameraScreenCustomization.feedBackframeMessage = faceMatchConfig.getString("setFeedBackframeMessage");
      } catch (JSONException e) {
        e.printStackTrace();
      }
    }else{
      cameraScreenCustomization.feedBackframeMessage = "Frame Your Face";
    }
    if (faceMatchConfig.has("setFeedBackAwayMessage")){
      try {
        cameraScreenCustomization.feedBackAwayMessage = faceMatchConfig.getString("setFeedBackAwayMessage");
      } catch (JSONException e) {
        e.printStackTrace();
      }
    }else{
      cameraScreenCustomization.feedBackAwayMessage = "Move Phone Away";
    }
    if (faceMatchConfig.has("setFeedBackOpenEyesMessage")){
      try {
        cameraScreenCustomization.feedBackOpenEyesMessage = faceMatchConfig.getString("setFeedBackOpenEyesMessage");
      } catch (JSONException e) {
        e.printStackTrace();
      }
    }else{
      cameraScreenCustomization.feedBackOpenEyesMessage = "Keep Your Eyes Open";
    }
    if (faceMatchConfig.has("setFeedBackCloserMessage")){
      try {
        cameraScreenCustomization.feedBackCloserMessage = faceMatchConfig.getString("setFeedBackCloserMessage");
      } catch (JSONException e) {
        e.printStackTrace();
      }
    }else{
      cameraScreenCustomization.feedBackCloserMessage = "Move Phone Closer";
    }
    if (faceMatchConfig.has("setFeedBackCenterMessage")){
      try {
        cameraScreenCustomization.feedBackCenterMessage = faceMatchConfig.getString("setFeedBackCenterMessage");
      } catch (JSONException e) {
        e.printStackTrace();
      }
    }else{
      cameraScreenCustomization.feedBackCenterMessage = "Move Phone Center";
    }
    if (faceMatchConfig.has("setFeedbackMultipleFaceMessage")){
      try {
        cameraScreenCustomization.feedBackMultipleFaceMessage = faceMatchConfig.getString("setFeedbackMultipleFaceMessage");
      } catch (JSONException e) {
        e.printStackTrace();
      }
    }else{
      cameraScreenCustomization.feedBackMultipleFaceMessage = "Multiple Face Detected";
    }
    if (faceMatchConfig.has("setFeedBackFaceSteadymessage")){
      try {
        cameraScreenCustomization.feedBackHeadStraightMessage = faceMatchConfig.getString("setFeedBackFaceSteadymessage");
      } catch (JSONException e) {
        e.printStackTrace();
      }
    }else{
      cameraScreenCustomization.feedBackHeadStraightMessage = "Keep Your Head Straight";

    }
    if (faceMatchConfig.has("setFeedBackLowLightMessage")){
      try {
        cameraScreenCustomization.feedBackLowLightMessage = faceMatchConfig.getString("setFeedBackLowLightMessage");
      } catch (JSONException e) {
        e.printStackTrace();
      }
    }else{
      cameraScreenCustomization.feedBackLowLightMessage = "Low light detected";
    }
    if (faceMatchConfig.has("setFeedBackBlurFaceMessage")){
      try {
        cameraScreenCustomization.feedBackBlurFaceMessage = faceMatchConfig.getString("setFeedBackBlurFaceMessage");
      } catch (JSONException e) {
        e.printStackTrace();
      }
    }else{
      cameraScreenCustomization.feedBackBlurFaceMessage = "Blur Detected Over Face";
    }
    if (faceMatchConfig.has("setFeedBackGlareFaceMessage")){
      try {
        cameraScreenCustomization.feedBackGlareFaceMessage = faceMatchConfig.getString("setFeedBackGlareFaceMessage");
      } catch (JSONException e) {
        e.printStackTrace();
      }
    }else{
      cameraScreenCustomization.feedBackGlareFaceMessage = "Glare Detected";
    }
    if (faceMatchConfig.has("setBlurPercentage")){
      try {
        cameraScreenCustomization.setBlurPercentage(faceMatchConfig.getInt("setBlurPercentage"));
      } catch (JSONException e) {
        e.printStackTrace();
      }
    }else{
      cameraScreenCustomization.setBlurPercentage(80);
    }
    if (faceMatchConfig.has("setGlarePercentage_0") && faceMatchConfig.has("setGlarePercentage_1")){
      try {
        cameraScreenCustomization.setGlarePercentage(faceMatchConfig.getInt("setGlarePercentage_0"),faceMatchConfig.getInt("setGlarePercentage_1"));
      } catch (JSONException e) {
        e.printStackTrace();
      }
    }else{
      cameraScreenCustomization.setGlarePercentage(-1, -1);
    }
    if (faceMatchConfig.has("setfeedbackDialogMessage")){
      try {
        cameraScreenCustomization.feedbackDialogMessage = faceMatchConfig.getString("setfeedbackDialogMessage");
      } catch (JSONException e) {
        e.printStackTrace();
      }
    }else {
      cameraScreenCustomization.feedbackDialogMessage = "Loading...";
    }
    if (faceMatchConfig.has("setfeedBackProcessingMessage")){
      try {
        cameraScreenCustomization.feedBackProcessingMessage = faceMatchConfig.getString("setfeedBackProcessingMessage");
      } catch (JSONException e) {
        e.printStackTrace();
      }
    }else{
      cameraScreenCustomization.feedBackProcessingMessage = "Processing...";
    }
    if (faceMatchConfig.has("isshowlogo")){
      try {
        cameraScreenCustomization.showlogo = faceMatchConfig.getInt("isshowlogo"); // Set 0 if hide logo
      } catch (JSONException e) {
        e.printStackTrace();
      }
    }else{
      cameraScreenCustomization.showlogo = 1; // Set 0 if hide logo
    }
    if (faceMatchConfig.has("setLowLightTolerence")){
      try {
        cameraScreenCustomization.setLowLightTolerence(faceMatchConfig.getInt("setLowLightTolerence"));
      } catch (JSONException e) {
        e.printStackTrace();
      }

    }else {
      cameraScreenCustomization.setLowLightTolerence(-1);
    }
    cameraScreenCustomization.logoIcon = R.drawable.accura_fm_logo; // To set your custom logo

    cameraScreenCustomization.facing = FMCameraScreenCustomization.CAMERA_FACING_FRONT;
    Intent intent = SelfieFMCameraActivity.getCustomIntent(this, cameraScreenCustomization);
    startActivityForResult(intent, ACCURA_FACEMATCH_CAMERA);

  }


  @Override
  public void onActivityResult(int requestCode, int resultCode,Intent data) {
    super.onActivityResult(requestCode, resultCode, data);

    if (resultCode == Activity.RESULT_OK) {

      if (requestCode == PICK_IMAGE) { //handle request code PICK_IMAGE used for selecting image from gallery

        if (data == null) // data contain result of selected image from gallery and other
        {
          Toast.makeText(this, "Failed", Toast.LENGTH_SHORT).show();
//                AccurascanKycModule.onResult.error("101", "Retry...", null);
          this.finish();
        }

        Uri uri = data.getData();
        String fileDir = getFilesDir().getAbsolutePath();

        if(ind == 1){
          try {
            AccurascanKycModule.face1 =
              face1 = MediaStore.Images.Media.getBitmap(this.getContentResolver() , uri);
          } catch (IOException e) {
            e.printStackTrace();
          }
        }else if(ind == 2){
          try {
            AccurascanKycModule.face2 =
              face2 = MediaStore.Images.Media.getBitmap(this.getContentResolver() , uri);
          } catch (IOException e) {
            e.printStackTrace();
          }
        }

        if(ind == 1){

          try {
            results.put("Image", AccurascanKycModule.getImageUri(AccurascanKycModule.face1, "Image", fileDir));
          } catch (JSONException e) {
            e.printStackTrace();
          }
          if(mface.equals("")) {
            AccurascanKycModule.onResult.invoke(null,results.toString());
            this.finish();
            return;
          }
          try {
            Bitmap trying = MediaStore.Images.Media.getBitmap(this.getContentResolver() , uri);
            helper.setInputImage(trying);

          } catch (IOException e) {
            e.printStackTrace();
          }

        }else if(ind == 2) {
          try {
            results.put("Image", AccurascanKycModule.getImageUri(AccurascanKycModule.face2, "Image", fileDir));
          } catch (JSONException e) {
            e.printStackTrace();
          }
          if (sface.equals("")) {
            AccurascanKycModule.onResult.invoke(null,results.toString());
            this.finish();
            return;
          }
          try {
            Bitmap trying = MediaStore.Images.Media.getBitmap(this.getContentResolver() , uri);
            helper.setMatchImage(trying);

          } catch (IOException e) {
            e.printStackTrace();
          }
//          helper.setMatchImage(uri);

        }

      } else if (requestCode == ACCURA_FACEMATCH_CAMERA) { // handle request code CAPTURE_IMAGE used for capture image in camera
        AccuraFMCameraModel result = data.getParcelableExtra("Accura.fm");
        if (result == null) {
          Toast.makeText(this, "Failed", Toast.LENGTH_SHORT).show();
//                    AccurascanKycModule.onResult.error("101","Retry...", null);
          this.finish();
        }
        if (result.getStatus().equals("1")) {
          handleVerificationSuccessResult(result);
        } else {
          Toast.makeText(this, result.getStatus() + "Retry...", Toast.LENGTH_SHORT).show();
        }
      }
    } else {
      // Toast.makeText(this, "Cancelled", Toast.LENGTH_SHORT).show();
      AccurascanKycModule.onResult.invoke("Cancelled", null);
      this.finish();
    }
  }

  public void handleVerificationSuccessResult(final AccuraFMCameraModel result) {
    String fileDir = getFilesDir().getAbsolutePath();
    if (result != null) {
      if (result.getFaceBiometrics() != null) {
        Bitmap nBmp = result.getFaceBiometrics();

        if(ind == 1){
          AccurascanKycModule.face1 =
            face1 = nBmp;
          try {
            results.put("Image", AccurascanKycModule.getImageUri(AccurascanKycModule.face1, "Image", fileDir));

          } catch (JSONException e) {
            e.printStackTrace();
          }
          if(mface.equals("")) {
            AccurascanKycModule.onResult.invoke(null,results.toString());
            this.finish();
            return;
          }
          helper.setInputImage(face1);

        }else if(ind == 2) {
          AccurascanKycModule.face2 =
            face2 = nBmp;
          try {
            results.put("Image", AccurascanKycModule.getImageUri(AccurascanKycModule.face2, "Image", fileDir));
          } catch (JSONException e) {
            e.printStackTrace();
          }
          if (sface.equals("")) {
            AccurascanKycModule.onResult.invoke(null,results.toString());
            this.finish();
            return;
          }
          helper.setMatchImage(face2);

        }
      }
    }
  }

  @Override
  public void onInitEngine(int i) {
  }

  @Override
  public void onLeftDetect(FaceDetectionResult faceResult) {
    if (faceResult != null) {
      image1.setFaceDetectionResult(faceResult);
      if (image1.getImage() != null && !image1.getImage().isRecycled()) image1.getImage().recycle();
      image1.setImage(BitmapHelper.createFromARGB(faceResult.getNewImg(), faceResult.getNewWidth(), faceResult.getNewHeight()));
      image1.requestLayout();
    } else {
      if (image1 != null && image1.getImage() != null) {
        image1.setImage(image1.getImage());
        image1.setFaceDetectionResult(null);
      }

    }
  }

  @Override
  public void onRightDetect(FaceDetectionResult faceResult) {
    if (faceResult != null) {
      if (image2 != null) {
        image2.setFaceDetectionResult(faceResult);
        if (image2.getImage() != null && !image2.getImage().isRecycled())
          image2.getImage().recycle();
        image2.setImage(BitmapHelper.createFromARGB(faceResult.getNewImg(), faceResult.getNewWidth(), faceResult.getNewHeight()));
        image2.requestLayout();
      }
    } else {
      if (image2 != null && image2.getImage() != null) {
        image2.setImage(image2.getImage());
        image2.setFaceDetectionResult(null);
      }
    }
  }

  @Override
  public void onExtractInit(int i) {

  }

  @Override
  public void onFaceMatch(float score) {
    NumberFormat nf = NumberFormat.getNumberInstance();
    nf.setMaximumFractionDigits(1);
    String ss = nf.format(score);
    if((ind == 1) && (!mface.equals(""))){
      try {
        results.put("score", ss);
      } catch (JSONException e) {
        e.printStackTrace();
      }
      try {
        AccurascanKycModule.onResult.invoke(null,results.toString());
        this.finish();
      }catch (Exception e){
        Log.i("Error",e.toString());
      }
    }else if ((ind == 2) && (!sface.equals(""))){
      try {
        results.put("score", ss);
      } catch (JSONException e) {
        e.printStackTrace();
      }
      try {
        AccurascanKycModule.onResult.invoke(null,results.toString());
        this.finish();
      }catch (Exception e){
        Log.i("Error",e.toString());
      }
    }
  }

  @Override
  public void onSetInputImage(Bitmap src1) {
    if (image1.getImage() != null && !image1.getImage().isRecycled()) image1.getImage().recycle();
    image1.setImage(src1);
  }

  @Override
  public void onSetMatchImage(Bitmap src2) {
    if (image2.getImage() != null && !image2.getImage().isRecycled()) image2.getImage().recycle();
    image2.setImage(src2);

  }
}
